# -----------------------------------------------------------------------------
# Generates internal Doxygen documentation in the "InternalDoc/html"
# subdirectory of the build directory.
# -----------------------------------------------------------------------------

Import('app_dict', 'base_env', 'doc_build_dir')

env = base_env.Clone(
    ABS_BUILD_DIR = Dir(f'#{doc_build_dir}').abspath,
    OUTPUT_DIR    = '$ABS_BUILD_DIR/InternalDoc',
    DOXYGEN       = '/local/inst/doxygen-1.9.8/bin/doxygen',  # Latest version.
)

# Set up environment variables for Doxyfile to access.
env.Append(
    ENV = {
        'APP_NAME'         : app_dict['APP_NAME'],
        'COPYRIGHT'        : app_dict['COPYRIGHT'],
        'VERSION_STRING'   : app_dict['VERSION_STRING'],
        'OUTPUT_DIRECTORY' : env.subst('$OUTPUT_DIR'),
        'ION_DOC_DIR'      : env.subst('$OUTPUT_DIR/../IonDoc'),
    }
)

dox_files = env.FindSources('.',      ['*'])
src_files = env.FindSources('../src', ['*.h', '*.cpp'])

# Create the dot diagram showing module dependencies.
dep_dot_file    = env.File('./include/moduledependencies.dot').abspath
dep_dot_program = env.File('../bin/findmoduledependencies.py').abspath
env.Command(dep_dot_file, [dep_dot_program, src_files],
            [f'{dep_dot_program} | tred -v > {dep_dot_file}',
             f'echo Created {dep_dot_file}'])

doc = env.Command('$OUTPUT_DIR/html/index.html',
                  dox_files + src_files + [dep_dot_file],
                  ['echo = Building internal doc for version: $VERSION_STRING',
                   '$DOXYGEN InternalDoc/Doxyfile'])

# IonDoc has to be built first to create the Ion.tag file.
env.Depends(doc, 'IonDoc')

Return('doc')
