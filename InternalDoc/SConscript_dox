# -----------------------------------------------------------------------------
# Generates internal Doxygen documentation in the "InternalDoc/html"
# subdirectory of the build directory.
# -----------------------------------------------------------------------------

Import('app_dict', 'doc_build_dir')

env = Environment(
    ABS_BUILD_DIR = Dir(f'#{doc_build_dir}').abspath,
    OUTPUT_DIR    = '$ABS_BUILD_DIR/InternalDoc',
    DOXYGEN       = '/local/inst/doxygen-1.9.6/bin/doxygen',  # Latest version.
)

# Set up environment variables for Doxyfile to access.
env.Append(
    ENV = {
        'APP_NAME'         : app_dict['APP_NAME'],
        'COPYRIGHT'        : app_dict['COPYRIGHT'],
        'VERSION_STRING'   : app_dict['VERSION_STRING'],
        'OUTPUT_DIRECTORY' : env.subst('$OUTPUT_DIR'),
    }
)

# Recursive function to find all files of certain types for Doxygen input. This
# allows dependencies to be set up correctly.
def FindSources_(root_dir, patterns):
    from fnmatch import filter as fnfilter
    from os      import walk
    from os.path import join
    sources = []
    for root, dirnames, filenames in walk(root_dir):
        for pattern in patterns:
            sources += [join(root, fn) for fn in fnfilter(filenames, pattern)]
    return sources

dox_files = FindSources_('.',      ['*'])
src_files = FindSources_('../src', ['*.h', '*.cpp'])

# Create the dot diagram showing module dependencies.
dep_dot_file    = env.File('./include/moduledependencies.dot').abspath
dep_dot_program = env.File('../bin/findmoduledependencies.py').abspath
env.Command(dep_dot_file, [dep_dot_program, src_files],
            [f'{dep_dot_program} | tred -v > {dep_dot_file}',
             f'echo Created {dep_dot_file}'])

doc = env.Command('$OUTPUT_DIR/html/index.html',
                  dox_files + src_files + [dep_dot_file],
                  ['echo = Building internal doc for version: $VERSION_STRING',
                   '$DOXYGEN InternalDoc/Doxyfile'])
Return('doc')
