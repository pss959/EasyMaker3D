Import('ion_env', 'ion_lib', 'ion_test_env')

# -----------------------------------------------------------------------------
# Test source files.
# -----------------------------------------------------------------------------

# Each entry is a tuple: (subdir, names); names are names of .cc files.
test_files = [
    ('base', [
        'allocatable_test',
        'allocationmanager_test',
        'allocator_test',
        'array2_test',
        'calllist_test',
        'circularbuffer_test',
        'datacontainer_test',
        'datetime_test',
        'enumhelper_test',
        'fullallocationtracker_test',
        'functioncall_test',
        'incompletetype',
        'indexmap_test',
        'invalid_test',
        'logchecker_test',
        'logging_test',
        'memoryzipstream_test',
        'notifier_test',
        'nulllogentrywriter_test',
        'once_test',
        'readwritelock_test',
        'scalarsequence_test',
        'scopedallocation_test',
        'serialize_test',
        'setting_test',
        'settingmanager_test',
        'sharedptr_test',
        'signal_test',
        'spinmutex_test',
        'staticsafedeclare_test',
        'stlallocator_test',
        'stringutils_test',
        'testallocator',
        'threadlocalobject_test',
        'threadspawner_test',
        'type_structs_test',
        'utf8iterator_test',
        'variant_test',
        'varianttyperesolver_test',
        'vectordatacontainer_test',
        'weakreferent_test',
        'workerpool_test',
        'zipassetmanager_test',
    ]),
    ('gfx', [
        'attribute_test',
        'attributearray_test',
        'bufferobject_test',
        'computeprogram_test',
        'cubemaptexture_test',
        'fakeglcontext',
        'fakegraphicsmanager',
        'fakegraphicsmanager_test',
        'framebufferobject_test',
        'graphicsmanager_test',
        'image_test',
        'indexbuffer_test',
        'mockresource_test',
        'node_test',
        'renderer_common',
        'renderer_test',
        'renderer_texture_test',
        'resourcemanager_test',
        'sampler_test',
        'shader_test',
        'shaderinputregistry_test',
        'shaderprogram_test',
        'shape_test',
        'statetable_test',
        'testscene',
        'texture_test',
        'tracecallextractor_test',
        'traceverifier',
        'transformfeedback_test',
        'uniform_test',
        'uniformblock_test',
        'uniformholder_test',
        'updatestatetable_test',
    ]),
    ('gfxutils', [
        'buffertoattributebinder_test',
        'frame_test',
        'printer_test',
        'shadermanager_test',
        'shadersourcecomposer_test',
        'shapeutils_test',
    ]),
    ('math', [
        'angle_test',
        'angleutils_test',
        'fieldofview_test',
        'matrix_test',
        'matrixutils_test',
        'range_test',
        'rangeutils_test',
        'rotation_test',
        'transformutils_test',
        'utils_test',
        'vector_test',
        'vectorutils_test',
    ]),
    ('port', [
        'align_test',
        'atomic_test',
        'barrier_test',
        'break_test',
        'cxx11_test',
        'environment_test',
        'fileutils_test',
        'macros_test',
        'memory_test',
        'memorymappedfile_test',
        'semaphore_test',
        # 'stacktrace_test',  # Fails due to changed system functions.
        'std_array_test',
        'std_unordered_map_test',
        'std_unordered_set_test',
        'string_test',
        'threadutils_test',
        'timer_test',
    ]),
    ('portgfx', [
        'isextensionsupported_test',
        'setswapinterval_test',
        'glcontext_test',
    ]),
]

# Some tests require assets that have been zipped into .iad (Ion Asset
# Definition) files. These are converted to source files with the ZipAsset()
# builder.
iad_files = [
    'base/tests/data/zipasset.iad',
    'gfxutils/tests/data/shapeutils_test.iad',
    'gfxutils/tests/data/zipassetcomposer_test.iad',
    'image/tests/data/images.iad',
]
iad_sources = [ion_env.ZipAsset(source=f'ion/{iad}',
                                target=iad.replace('.iad', '.cc'))
               for iad in iad_files]

gmock_sources = [f'#submodules/googletest/googlemock/src/{name}.cc'
                 for name in [
                         'gmock',
                         'gmock-cardinalities',
                         'gmock-internal-utils',
                         'gmock-matchers',
                         'gmock-spec-builders',
                 ]]

# Build one test program from all the sources.
ion_test_sources = [f'ion/{subdir}/tests/{name}.cc'
                    for (subdir, names) in test_files for name in names]
ion_test = ion_test_env.Program(f'IonTest',
                                ion_test_sources + iad_sources + gmock_sources)

# Build and run tests in 'dbg' mode only!
if ion_test_env['MODE'] == 'dbg':
    # The 'IonTests' alias builds all Ion tests.
    ion_test_env.Alias('IonTests', ion_test)

    # The RunIonTests builds and runs all Ion tests
    test_filter = ARGUMENTS.get('TESTFILTER')
    test_args = ' '.join([
        ('--gtest_filter="%s"' % test_filter) if test_filter else '',
    ])
    ion_test_env.Alias('RunIonTests', ion_test,
                       [f'$RUN_PROGRAM $SOURCE {test_args}'])

    # Make sure test run targets are always considered out of date.
    ion_test_env.AlwaysBuild('RunIonTests')

elif ('IonTests'    in COMMAND_LINE_TARGETS or
      'RunIonTests' in COMMAND_LINE_TARGETS):
    print('*** Ion tests build and run only in dbg mode!')
    Exit()
