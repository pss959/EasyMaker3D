<?xml version='1.0' encoding='windows-1252'?>
<Wix xmlns='http://schemas.microsoft.com/wix/2006/wi'>
  <?define CompanyFullName = 'Google, Inc.'?>
  <?define Copyright = '$(var.ProductOriginalVersionString) Copyright 2011 Google Inc.'?>
  <?define UpdateKeyPath = 'SOFTWARE\Google\Update' ?>
  <?define InstallCommandBase='/silent /install "[ProductTag]" /installsource enterprisemsi[OptOmahaArgs]'?>

  <Product
    Id='$(var.MsiProductId)'
    Name='$(var.ProductName)'
    Language='1033'
    Codepage='1252'
    UpgradeCode='$(var.MsiUpgradeCode)'
    Version='$(var.ProductVersion)'
    Manufacturer='$(var.CompanyFullName)'>

    <Package
      Id='*'
      Description='$(var.ProductName) Installer'
      Comments='$(var.Copyright)'
      Manufacturer='$(var.CompanyFullName)'
      Languages='1033'
      SummaryCodepage='1252'
      InstallerVersion='150'
      InstallPrivileges='elevated'
      Compressed='yes' />

    <Upgrade Id='$(var.MsiUpgradeCode)'>
      <!-- Allow same-version repair. -->
      <UpgradeVersion Property='UPGRADEFOUND'
                      OnlyDetect='no'
                      Minimum='0.0.0.0' IncludeMinimum='yes'
                      Maximum='$(var.ProductVersion)' IncludeMaximum='yes' />
      <UpgradeVersion Property='NEWPRODUCTFOUND'
                      OnlyDetect='yes'
                      Minimum='$(var.ProductVersion)' IncludeMinimum='no' />
    </Upgrade>

    <!-- Per-machine installation - make sure product appears for all users. -->
    <Property Id='ALLUSERS' Value='1' />

    <?ifdef ProductIcon ?>
      <!-- If var.ProductIcon is defined, use that as an icon in the ARP
           dialog, otherwise rely on the ARP dialog's heuristics:
           http://blogs.msdn.com/oldnewthing/archive/2004/07/09/178342.aspx -->
      <Icon Id='icon.ico' SourceFile='$(var.ProductIcon)'/>
      <Property Id='ARPPRODUCTICON' Value='icon.ico' />
    <?endif?>

    <!-- ARPNOMODIFY does two things:
         1) Removes the 'Modify' button from the ARP dialog.
         2) Causes the 'Remove' command to invoke msiexec /X instead of /I
            (the intent being that WITH a Modify button, clicking either
            Modify or Remove command will launch your installer UI). -->
    <Property Id='ARPNOMODIFY' Value='1' />

    <!-- Find the uninstall string to be used for the product. Only used for
         uninstallation. -->
    <Property Id='UNINSTALLCMDLINE'>
      <RegistrySearch Id='UninstallCmdSearch'
                      Root='HKLM'
                      Type='raw'
                      Key='Software\Google\Update\ClientState\$(var.ProductGuid)'
                      Name='UninstallString'/>
    </Property>
    <Property Id='UNINSTALLCMDARGS'>
      <RegistrySearch Id='UninstallArgSearch'
                      Root='HKLM'
                      Type='raw'
                      Key='Software\Google\Update\ClientState\$(var.ProductGuid)'
                      Name='UninstallArguments'/>
    </Property>

    <!-- Eliminates "warning LGHT1076 : ICE71: The Media table has no entries."
    -->
    <Media Id='1' />

    <Directory Id='TARGETDIR' Name='SourceDir'>

      <!-- Use the ProductCode as the ComponentId since we want the latter to
           change for each version change in support of major upgrades. -->
      <Component Id='ProductClientState' Guid='$(var.MsiProductId)'>
        <!-- Clear the last UI string before running the installer so we know
             that any value present upon rollback is fresh. -->
        <RemoveRegistryValue Key='$(var.UpdateKeyPath)\ClientState\$(var.ProductGuid)'
                             Name='LastInstallerResultUIString'
                             Root='HKLM' />
        <RemoveRegistryValue Key='$(var.UpdateKeyPath)'
                             Name='LastInstallerResultUIString'
                             Root='HKLM' />
        <RegistryValue Id='NonEmptyComponent' Action='write'
                       Root='HKLM'
                       Key='$(var.UpdateKeyPath)\ClientState\$(var.ProductGuid)'
                       KeyPath='yes'
                       Name='EnterpriseProduct$(var.MsiProductId)' Type='string' Value='$(var.ProductVersion)' />
      </Component>

    </Directory>

    <Feature Id='Complete' Level='1'>
      <ComponentRef Id='ProductClientState' />
    </Feature>

    <!--TODO(omaha): Add "Standalone" after fixing the ProductName issue
        in standalone_installer.py.-->
    <Binary Id='$(var.ProductNameLegalIdentifier)Installer'
            SourceFile='$(var.StandaloneInstallerPath)' />

    <Binary Id='MsiInstallerCustomActionDll'
            SourceFile='$(var.MsiInstallerCADll)' />

    <CustomAction Id='NewerVersionError' Error='A newer version of the $(var.ProductName) enterprise installer is already installed.'/>

    <CustomAction Id='SetProductTagProperty'
      Property='ProductTag'
      Value='appguid=$(var.ProductGuid)&amp;appname=$(var.ProductName)&amp;needsAdmin=True'
      Execute='immediate'
      Return='check' />
    <CustomAction Id='AppendCustomParamsToProductTagProperty'
      Property='ProductTag'
      Value='[ProductTag]$(var.ProductCustomParams)'
      Execute='immediate'
      Return='check' />
    <CustomAction Id='AppendBrandToProductTagProperty'
      Property='ProductTag'
      Value='[ProductTag]&amp;brand=[BRAND]'
      Execute='immediate'
      Return='check' />
    <CustomAction Id='AppendUsageStatsToProductTagProperty'
      Property='ProductTag'
      Value='[ProductTag]&amp;usagestats=[USAGESTATS]'
      Execute='immediate'
      Return='check' />
    <CustomAction Id='AppendInstallDataIndexToProductTagProperty'
      Property='ProductTag'
      Value='[ProductTag]&amp;installdataindex=[INSTALLDATAINDEX]'
      Execute='immediate'
      Return='check' />

    <CustomAction Id='SetOptArgsProperty'
      Property='OptOmahaArgs'
      Value=''
      Execute='immediate'
      Return='check' />
    <CustomAction Id='AppendEnterpriseToOptArgsProperty'
      Property='OptOmahaArgs'
      Value='[OptOmahaArgs] /enterprise'
      Execute='immediate'
      Return='check' />

    <?ifdef ProductInstallerData ?>
        <CustomAction Id='BuildInstallCommand'
                      Property='InstallCommand'
                      Value='$(var.InstallCommandBase) /appargs "appguid=$(var.ProductGuid)&amp;installerdata=$(var.ProductInstallerData)"'
                      Execute='immediate'
                      Return='check' />
    <?else?>
        <CustomAction Id='BuildInstallCommand'
                      Property='InstallCommand'
                      Value='$(var.InstallCommandBase)'
                      Execute='immediate'
                      Return='check' />
    <?endif?>

    <!-- Send the ProductGuid to the ShowInstallerResultUIString custom action.
         The value is accessed through the "CustomActionData" property from
         within the action itself. -->
    <CustomAction Id='SetAppGuidProperty'
      Property='ShowInstallerResultUIString'
      Value='$(var.ProductGuid)' />

    <!-- A custom action to be executed on rollback to log and display the
         LastInstallerResultUIString. -->
    <CustomAction Id='ShowInstallerResultUIString'
      BinaryKey='MsiInstallerCustomActionDll'
      DllEntry='ShowInstallerResultUIString'
      Execute='rollback'
      Impersonate='no' />

    <!-- A custom action to be executed to extract tag information from the MSI
         package. -->
    <CustomAction Id='ExtractTagInfoFromInstaller'
      BinaryKey='MsiInstallerCustomActionDll'
      DllEntry='ExtractTagInfoFromInstaller'
      Execute='immediate'
      Impersonate='no' />

    <CustomAction Id='DoInstall'
      BinaryKey='$(var.ProductNameLegalIdentifier)Installer'
      Impersonate='no'
      Execute='deferred'
      ExeCommand='[InstallCommand]'
      Return='check' />
    <CustomAction Id='CallUninstaller.SetProperty'
      Property='UninstallCmd'
      Value='[UNINSTALLCMDLINE]'
      Execute='immediate'
      Return='check' />
    <CustomAction Id='CallUninstallerArgs.SetProperty'
      Property='UninstallCmdArgs'
      Value='[UNINSTALLCMDARGS]'
      Execute='immediate'
      Return='check' />
    <CustomAction Id='CallUninstaller'
      Property='UninstallCmd'
      ExeCommand='[UninstallCmdArgs] $(var.ProductUninstallerAdditionalArgs)'
      Impersonate='no'
      Execute='deferred'
      Return='check' />

    <InstallExecuteSequence>
      <RemoveExistingProducts After='InstallValidate' />

      <Custom Action='NewerVersionError' After='FindRelatedProducts'>
        NEWPRODUCTFOUND
      </Custom>

      <!-- Build tag property. -->
      <Custom Action='ExtractTagInfoFromInstaller'
              Before='SetProductTagProperty'>
        (($ProductClientState>2) OR REINSTALL)
      </Custom>
      <Custom Action='SetProductTagProperty'
              Before='AppendCustomParamsToProductTagProperty'>
        (($ProductClientState>2) OR REINSTALL)
      </Custom>
      <Custom Action='AppendCustomParamsToProductTagProperty'
              Before='AppendBrandToProductTagProperty'>
        (($ProductClientState>2) OR REINSTALL)
      </Custom>
      <Custom Action='AppendBrandToProductTagProperty'
              Before='AppendUsageStatsToProductTagProperty'>
        (($ProductClientState>2) OR REINSTALL) AND (BRAND &lt;&gt; "")
      </Custom>
      <Custom Action='AppendUsageStatsToProductTagProperty'
              Before='AppendInstallDataIndexToProductTagProperty'>
        (($ProductClientState>2) OR REINSTALL) AND (USAGESTATS &lt;&gt; "")
      </Custom>
      <Custom Action='AppendInstallDataIndexToProductTagProperty'
              Before='BuildInstallCommand'>
        (($ProductClientState>2) OR REINSTALL) AND (INSTALLDATAINDEX &lt;&gt; "")
      </Custom>
      <Custom Action='SetOptArgsProperty'
              Before='AppendEnterpriseToOptArgsProperty'>
        (($ProductClientState>2) OR REINSTALL)
      </Custom>
      <Custom Action='AppendEnterpriseToOptArgsProperty'
              Before='BuildInstallCommand'>
        (($ProductClientState>2) OR REINSTALL) AND (NOGOOGLEUPDATEPING &lt;&gt; "")
      </Custom>
      <Custom Action='BuildInstallCommand'
              Before='SetAppGuidProperty'>
        (($ProductClientState>2) OR REINSTALL)
      </Custom>
      <Custom Action='SetAppGuidProperty'
              Before='ShowInstallerResultUIString'>
        (($ProductClientState>2) OR REINSTALL)
      </Custom>
      <Custom Action='ShowInstallerResultUIString'
              Before='DoInstall'>
        (($ProductClientState>2) OR REINSTALL)
      </Custom>

      <!-- TODO(omaha): Support Rollback? I do not think so because there are
           very few cases where the app could be installed but Omaha would
           report a failure. If we support rollback, need to determine whether
           Product was installed before and only add the rollback then.
      <Custom Action='Rollback$(var.ProductNameLegalIdentifier)'
              After='InstallFiles'>
        (($ProductClientState>2) OR REINSTALL) AND (NOT $(var.ProductNameLegalIdentifier)_INSTALLED)
      </Custom>
      Change After='InstallFiles' below to
      After='Rollback$(var.ProductNameLegalIdentifier)'. -->

      <Custom Action='DoInstall'
              After='InstallFiles'>
        (($ProductClientState>2) OR REINSTALL)
      </Custom>

      <Custom Action='CallUninstallerArgs.SetProperty'
              Before='CallUninstaller.SetProperty'>
        <![CDATA[REMOVE="ALL" AND NOT UPGRADINGPRODUCTCODE]]>
      </Custom>
      <Custom Action='CallUninstaller.SetProperty'
              Before='CallUninstaller'>
        <![CDATA[REMOVE="ALL" AND NOT UPGRADINGPRODUCTCODE]]>
      </Custom>
      <Custom Action='CallUninstaller'
              Before='RemoveFiles'>
        <![CDATA[REMOVE="ALL" AND NOT UPGRADINGPRODUCTCODE]]>
      </Custom>

      <!-- Google Update will uninstall itself if the product is the only app it
           so no need to have an uninstall operation. -->

    </InstallExecuteSequence>

  </Product>
</Wix>
