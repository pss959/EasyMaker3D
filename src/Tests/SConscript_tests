from os import environ

Import('reg_test_env', 'cov_test_env')

# On Windows, have to use a bash script to run anything (to pick up shared
# libraries).
if reg_test_env['PLATFORM'] == 'windows':
    mode = reg_test_env['MODE']
    run_program = (f'c:/msys64/usr/bin/bash.exe bin/runwinprogram.bash {mode}')
else:
    run_program = ''

test_sources = [
    'AppTestBase.cpp',
    'AssertTest.cpp',
    'BeveledModelTest.cpp',
    'BevelerTest.cpp',
    'BoundsTest.cpp',
    'ClipboardTest.cpp',
    'ClippedModelTest.cpp',
    'CloneTest.cpp',
    'ColorTest.cpp',
    'CommandListTest.cpp',
    'CoordConvTest.cpp',
    'DelayTest.cpp',
    'DimensionalityTest.cpp',
    'EnumTest.cpp',
    'EventTest.cpp',
    'FeedbackManagerTest.cpp',
    'FilePathTest.cpp',
    'FlagsTest.cpp',
    'FrustumTest.cpp',
    'HandTest.cpp',
    'IntersectorTest.cpp',
    'LinearTest.cpp',
    'MeshBuildingTest.cpp',
    'MeshCombiningTest.cpp',
    'MeshUtilsTest.cpp',
    'ModelMeshBinaryTest.cpp',
    'ModelTest.cpp',
    'NameManagerTest.cpp',
    'NodeBoundsTest.cpp',
    'NodePathTest.cpp',
    'NodeTest.cpp',
    'PaneTest.cpp',
    'ParserTest.cpp',
    'PlaneTest.cpp',
    'PolyMeshTest.cpp',
    'PolygonTest.cpp',
    'ReadFileTest.cpp',
    'ReadSTLTest.cpp',
    'ReaderTest.cpp',
    'RegistryTest.cpp',
    'ScaleCommandTest.cpp',
    'SceneTestBase.cpp',
    'SearchTest.cpp',
    'StringTest.cpp',
    'TestBase.cpp',
    'TextUtilsTest.cpp',
    'TimingTest.cpp',
    'TriMeshBinaryTest.cpp',
    'TriangulationTest.cpp',
    'UTimeTest.cpp',
    'UtilTest.cpp',
    'WriteSTLTest.cpp',

    # Session tests:
    'SessionTests/ClipSessionTest.cpp',
    'SessionTests/CopyBeveledSessionTest.cpp',
    'SessionTests/EmptySessionTest.cpp',
    'SessionTests/MirrorSessionTest.cpp',
    'SessionTests/PasteSessionTest.cpp',
    'SessionTests/RevSurfSessionTest.cpp',
    'SessionTests/SessionTestBase.cpp',
    'SessionTests/TransformSessionTest.cpp',
    'SessionTests/UndoSessionTest.cpp',

    'TestMain.cpp',  # main() function that runs all tests.
]

# -----------------------------------------------------------------------------
# Building tests.
# -----------------------------------------------------------------------------

# Build test object files for both environments.
def BuildTests(env, test_app_name):
    defines  = env['CPPDEFINES'] + [('IN_UNIT_TEST', 1)]
    cpppaths = env['CPPPATH'] + ['#/src/Tests/']
    objects  = [env.SharedObject(source=source, CPPDEFINES=defines,
                                 CPPPATH=cpppaths)
                for source in test_sources]

    # Build all unit tests into a single program.
    return (objects, env.Program(f'$BUILD_DIR/Tests/{test_app_name}',
                                 objects))

(reg_test_objects, reg_test) = BuildTests(reg_test_env, 'RegUnitTest')
(cov_test_objects, cov_test) = BuildTests(cov_test_env, 'CovUnitTest')

reg_test_env.Alias('RegTests', reg_test)
cov_test_env.Alias('CovTests', cov_test)

# -----------------------------------------------------------------------------
# Running tests.
# -----------------------------------------------------------------------------

test_filter = ARGUMENTS.get('TESTFILTER')
test_args = ' '.join([
  '--gtest_catch_exceptions=0',   # Let exceptions be handled outside gtest.
  ('--gtest_filter="%s"' % test_filter) if test_filter else '',
])

reg_test_env.Alias('RunRegTests', reg_test,
                   f'$PROGRAM_RUNNER $SOURCE {test_args}')
cov_test_env.Alias('RunCovTests', cov_test,
                   f'$PROGRAM_RUNNER $SOURCE {test_args}')

# Make sure test run targets are always considered out of date.
reg_test_env.AlwaysBuild('RunRegTests')
cov_test_env.AlwaysBuild('RunCovTests')

# -----------------------------------------------------------------------------
# Generating coverage results.
# -----------------------------------------------------------------------------

cov_lib_objects = []  # XXXX

# Use all coverage-enabled object files.
cov_objects = cov_lib_objects + cov_test_objects
cov_object_str = ' '.join([obj[0].path for obj in cov_objects])

# Patterns to remove from coverage results.
rm_patterns  =  '"/usr/include/*" "/local/inst/ion/*" "*/submodules/*"'

# Files for original lcov output and filtered output.
lcov_file1   =  'coverage/coverage.info'
lcov_file2   =  'coverage/coverage_filtered.info'

# Arguments to lcov to capture results and to filter them.
lcov_args1   = f'--capture --directory .. --output-file {lcov_file1}'
lcov_args2   = f'--remove {lcov_file1} {rm_patterns} --output-file {lcov_file2}'

# Arguments to genhtml to produce the HTML results.
genhtml_args = f'--output-directory coverage/html {lcov_file2}'

gen_coverage = cov_test_env.Command(
    'coverage/index.html', cov_test,
    [
        # Run the test.
        f'$SOURCE {test_args}',
        # Generate coverage .
        'mkdir -p $BUILD_DIR/coverage',
        f'cd $BUILD_DIR ; lcov {lcov_args1} ; lcov {lcov_args2}',
        # Generate HTML from the results .
        f'cd $BUILD_DIR ; genhtml {genhtml_args}',
        ('echo === Coverage results in ' +
         Dir('$BUILD_DIR/coverage/html/index.html').abspath)
    ])

cov_test_env.Alias('Coverage', gen_coverage)
