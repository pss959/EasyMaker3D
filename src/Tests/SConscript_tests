from os import environ

Import('test_env')

platform = test_env['PLATFORM']
mode     = test_env['MODE']

test_sources = [
    'AppTestBase.cpp',
    'AssertTest.cpp',
    'BeveledModelTest.cpp',
    'BevelerTest.cpp',
    'BoundsTest.cpp',
    'ClipboardTest.cpp',
    'ClippedModelTest.cpp',
    'CloneTest.cpp',
    'ColorTest.cpp',
    'CommandListTest.cpp',
    'CoordConvTest.cpp',
    'CustomShortcutTest.cpp',
    'DelayTest.cpp',
    'DimensionalityTest.cpp',
    'EnumTest.cpp',
    'EventTest.cpp',
    'FeedbackManagerTest.cpp',
    'FilePathTest.cpp',
    'FlagsTest.cpp',
    'FrustumTest.cpp',
    'HandTest.cpp',
    'IntersectorTest.cpp',
    'LinearTest.cpp',
    'MeshBuildingTest.cpp',
    'MeshCombiningTest.cpp',
    'MeshUtilsTest.cpp',
    'ModelMeshBinaryTest.cpp',
    'ModelTest.cpp',
    'NameManagerTest.cpp',
    'NodeBoundsTest.cpp',
    'NodePathTest.cpp',
    'NodeTest.cpp',
    'PaneTest.cpp',
    'ParserTest.cpp',
    'PlaneTest.cpp',
    'PolyMeshTest.cpp',
    'PolygonTest.cpp',
    'ProfileTest.cpp',
    'ReadFileTest.cpp',
    'ReadSTLTest.cpp',
    'ReaderTest.cpp',
    'RegistryTest.cpp',
    'ScaleCommandTest.cpp',
    'SceneTestBase.cpp',
    'SearchTest.cpp',
    'StringTest.cpp',
    'TestBase.cpp',
    'TextUtilsTest.cpp',
    'TimingTest.cpp',
    'TriMeshBinaryTest.cpp',
    'TriangulationTest.cpp',
    'UTimeTest.cpp',
    'UtilTest.cpp',
    'WriteSTLTest.cpp',

    # Session tests:
    'SessionTests/CSGSessionTest.cpp',
    'SessionTests/ClipSessionTest.cpp',
    'SessionTests/CopyBeveledSessionTest.cpp',
    'SessionTests/EmptySessionTest.cpp',
    'SessionTests/MirrorSessionTest.cpp',
    'SessionTests/PasteSessionTest.cpp',
    'SessionTests/RevSurfSessionTest.cpp',
    'SessionTests/SessionTestBase.cpp',
    'SessionTests/TransformSessionTest.cpp',
    'SessionTests/UndoSessionTest.cpp',

    'TestMain.cpp',  # main() function that runs all tests.
]

# -----------------------------------------------------------------------------
# Building tests.
# -----------------------------------------------------------------------------

test_defines  = test_env['CPPDEFINES'] + [('IN_UNIT_TEST', 1)]
test_cpppaths = test_env['CPPPATH'] + ['#/src/Tests/']
test_objects  = [test_env.SharedObject(source=source, CPPDEFINES=test_defines,
                                       CPPPATH=test_cpppaths)
                 for source in test_sources]

# Build all unit tests into a single program.
test_program = test_env.Program('UnitTest', test_objects)

test_env.Alias('Tests', test_program)

# -----------------------------------------------------------------------------
# Running tests.
# -----------------------------------------------------------------------------

test_filter = ARGUMENTS.get('TESTFILTER')
test_args = ' '.join([
  '--gtest_catch_exceptions=0',   # Let exceptions be handled outside gtest.
  ('--gtest_filter="%s"' % test_filter) if test_filter else '',
])

test_env.Alias('RunTests', test_program, f'$RUN_PROGRAM $SOURCE {test_args}')

# Make sure test run targets are always considered out of date.
test_env.AlwaysBuild('RunTests')

# -----------------------------------------------------------------------------
# Generating coverage results. (Linux platform, 'cov' mode only)
# -----------------------------------------------------------------------------

if platform == 'linux' and mode == 'cov':
    # Patterns to remove from coverage results.
    rm_patterns = '"*/include/*" "*/ionsrc/*" "*/submodules/*"'

    # Files for original lcov output and filtered output.
    lcov_file1 = 'coverage/coverage.info'
    lcov_file2 = 'coverage/coverage_filtered.info'

    # Arguments to lcov to capture results and to filter them.
    lcov_args1 = f'--capture --directory .. --output-file {lcov_file1}'
    lcov_args2 = (f'--remove {lcov_file1} {rm_patterns}' +
                  f' --output-file {lcov_file2}')

    # Arguments to genhtml to produce the HTML results.
    genhtml_args = f'--output-directory coverage/html {lcov_file2}'

    gen_coverage = test_env.Command(
        'coverage/index.html', test_program,
        [
            # Run the test.
            f'$SOURCE {test_args}',
            # Generate coverage .
            'mkdir -p $BUILD_DIR/coverage',
            f'cd $BUILD_DIR ; lcov {lcov_args1} ; lcov {lcov_args2}',
            # Generate HTML from the results .
            f'cd $BUILD_DIR ; genhtml {genhtml_args}',
            ('echo === Coverage results in ' +
             test_env.File('#$BUILD_DIR/coverage/html/index.html').abspath)
        ])

    test_env.Alias('Coverage', gen_coverage)
