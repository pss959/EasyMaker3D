from os      import environ
from os.path import basename

Import('test_env')

platform = test_env['PLATFORM']
mode     = test_env['MODE']

# Source files with base testing classes and test mainline.
main_test_sources = [
    'AppTestBase.cpp',
    'SceneTestBase.cpp',
    'SessionTests/SessionTestBase.cpp',
    'SimTests/SimTestBase.cpp',
    'TestBase.cpp',
    'TestMain.cpp',     # Mainline to run tests.
]

# The rest of the source files are divided into categories to make it easier to
# run a subset of tests. This is a dictionary mapping category to source files.
# Note that this arrangement assumes that all tests in a source file are named
# the same as the source file.
test_source_dict = {
    'Base' : [
        'EventTest',
    ],
    'Command' : [
        'CommandListTest',
        'ScaleCommandTest',
    ],
    'Enum' : [
        'EnumTest',
        'HandTest',
    ],
    'Handler' : [
        'CustomShortcutTest',
    ],
    'IO' : [
        'ReadSTLTest',
        'WriteSTLTest',
    ],
    'Manager' : [
        'ClipboardManagerTest',
        'FeedbackManagerTest',
        'NameManagerTest',
    ],
    'Math' : [
        'BevelerTest',
        'BoundsTest',
        'ColorTest',
        'DimensionalityTest',
        'FrustumTest',
        'LinearTest',
        'MathToStringTest',
        'MeshBuildingTest',
        'MeshClippingTest',
        'MeshSlicingTest',
        'MeshUtilsTest',
        'ModelMeshBinaryTest',
        'PlaneTest',
        'Point3fMapTest',
        'PolyMeshTest',
        'PolygonTest',
        'ProfileTest',
        'TextUtilsTest',
        'TriMeshBinaryTest',
        'TriangulationTest',
    ],
    'Model' : [
        'BentModelTest',
        'BeveledModelTest',
        'ClippedModelTest',
        'ModelTest',
        'RevSurfModelTest',
        'TaperedModelTest',
    ],
    'Pane' : [
        'PaneTest',
    ],
    'Parser' : [
        'ParserTest',
        'RegistryTest',
    ],
    'Session' : [
        'SessionTests/CSGSessionTest',
        'SessionTests/ClipSessionTest',
        'SessionTests/CopyBeveledSessionTest',
        'SessionTests/EmptySessionTest',
        'SessionTests/MirrorSessionTest',
        'SessionTests/PasteSessionTest',
        'SessionTests/RevSurfSessionTest',
        'SessionTests/TransformSessionTest',
        'SessionTests/UndoSessionTest',
    ],
    'SG' : [
        'CloneTest',
        'CoordConvTest',
        'IntersectorTest',
        'NodeBoundsTest',
        'NodePathTest',
        'NodeTest',
        'ReaderTest',
        'SearchTest',
    ],
    'Sim' : [
        'SimTests/EmptySimTest',
        'SimTests/HoverSimTest',
    ],
    'Timing' : [
        'TimingTest',
    ],
    'Util' : [
        'AlarmTest',
        'AssertTest',
        'DelayTest',
        'ExceptionTest',
        'FilePathListTest',
        'FilePathTest',
        'FlagsTest',
        'NotifierTest',
        'ReadTest',
        'StringTest',
        'UTimeTest',
        'UtilTest',
        'WriteTest',
    ],
}

# -----------------------------------------------------------------------------
# Building tests.
# -----------------------------------------------------------------------------

test_sources  = [f'{src}.cpp' for srclist in test_source_dict.values()
                 for src in srclist] + main_test_sources
test_defines  = list(test_env['CPPDEFINES']) + [('IN_UNIT_TEST', 1)]
test_cpppaths = test_env['CPPPATH'] + ['#/src/Tests/']
test_objects  = [test_env.SharedObject(source=source, CPPDEFINES=test_defines,
                                       CPPPATH=test_cpppaths)
                 for source in test_sources]

# Build all unit tests into a single program.
test_program = test_env.Program('UnitTest', test_objects)

test_env.Alias('Tests', test_program)

# -----------------------------------------------------------------------------
# Running tests.
# -----------------------------------------------------------------------------

# The TESTCATEGORIES argument can be used to limit the test categories to
# run. It is a comma-separated list of categories. The TESTFILTER argument is
# passed as '--gtest_filter' to the test program to further filter the test
# names.
test_categories_arg = ARGUMENTS.get('TESTCATEGORIES')
test_filter_arg     = ARGUMENTS.get('TESTFILTER')

# Verify categories and collect test names.
categories = test_categories_arg.split(',') if test_categories_arg else []
cat_names = []
for cat in categories:
    if not cat in test_source_dict:
        print(f'*** Unknown test category "{cat}"')
        Exit()
    else:
        cat_names += [basename(src) for src in test_source_dict[cat]]

# Set up the test filter based on the arguments.
test_filter = ':'.join([f'{name}*' for name in cat_names]) if cat_names else ''
if test_filter_arg:
    test_filter = (f'{test_filter}:{test_filter_arg}' if test_filter
                   else test_filter_arg)

test_args = ' '.join([
  '--gtest_catch_exceptions=0',   # Let exceptions be handled outside gtest.
  ('--gtest_filter="%s"' % test_filter) if test_filter else '',
])

test_env.Alias('RunTests', test_program, f'$RUN_PROGRAM $SOURCE {test_args}')

# Make sure test run targets are always considered out of date.
test_env.AlwaysBuild('RunTests')

# -----------------------------------------------------------------------------
# Generating coverage results. (Linux platform, 'cov' mode only)
# -----------------------------------------------------------------------------

if platform == 'linux' and mode == 'cov':
    config_file   = '#/gcovr.cfg'
    coverage_file = test_env.File('#$BUILD_DIR/coverage/index.html').abspath
    gen_coverage = test_env.Command(
        coverage_file, [test_program, config_file],
        [
            # Run the test.
            f'$SOURCE {test_args}',
            # Generate coverage .
            'mkdir -p $BUILD_DIR/coverage',
            'gcovr',
            f'echo === Coverage results in {coverage_file}'
        ])

    test_env.Alias('Coverage', gen_coverage)
