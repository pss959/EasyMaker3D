from os      import environ
from os.path import basename

Import('ion_env', 'test_env')

platform = test_env['PLATFORM']
mode     = test_env['MODE']

# Source files with base testing classes and test mainline.
main_test_sources = [
    'AppTestBase.cpp',
    'SceneTestBase.cpp',
    'Session/SessionTestBase.cpp',
    'Sim/SimTestBase.cpp',
    'TempFile.cpp',
    'TestBase.cpp',
    'TestBaseWithTypes.cpp',
    'TestMain.cpp',     # Mainline to run tests.
]

# Source files from Ion needed for testing.
ion_test_sources = [
    'gfx/tests/fakeglcontext.cc',
    'gfx/tests/fakegraphicsmanager.cc',
]

# The rest of the source files are divided into categories (matching
# subdirectories) to make it easier to run a subset of tests. This is a
# dictionary mapping category/subdirectory to source files.  Note that this
# arrangement assumes that all tests in a source file are named the same as the
# source file.
test_source_dict = {
    'Base' : [
        'ActionMapTest',
        'EventTest',
        'HelpMapTest',
        'ProceduralTest',
        'VirtualKeyboardTest',
    ],
    'Commands' : [
        'ChangeBendCommandTest',
        'ChangeBevelCommandTest',
        'ChangeCSGOperationCommandTest',
        'ChangeClipCommandTest',
        'ChangeColorCommandTest',
        'ChangeComplexityCommandTest',
        'ChangeCylinderCommandTest',
        'ChangeEdgeTargetCommandTest',
        'ChangeExtrudedCommandTest',
        'ChangeImportedModelCommandTest',
        'ChangeMirrorCommandTest',
        'ChangeNameCommandTest',
        'ChangeOrderCommandTest',
        'ChangePointTargetCommandTest',
        'ChangeRevSurfCommandTest',
        'ChangeTaperCommandTest',
        'ChangeTextCommandTest',
        'ChangeTorusCommandTest',
        'ChangeTwistCommandTest',
        'CombineCommandTest',
        'CommandListTest',
        'CommandTestBase',
        'ConvertCommandTest',
        'CreateModelCommandTest',
        'LinearLayoutCommandTest',
        'MultiModelCommandTest',
        'OtherCommandTest',
        'RadialLayoutCommandTest',
        'RotateCommandTest',
        'ScaleCommandTest',
        'SingleModelCommandTest',
        'TranslateCommandTest',
    ],
    'Enums' : [
        'EnumTest',
        'HandTest',
    ],
    'Executors' : [
        'ScaleExecutorTest',
    ],
    'Feedback' : [
        'FeedbackTest',
    ],
    'Handlers' : [
        'CustomShortcutTest',
    ],
    'IO' : [
        'ReadSTLTest',
        'WriteSTLTest',
    ],
    'Items' : [
        'ControllerTest',
        'GrippableTest',
        'ItemTest',
        'RadialMenuTest',
        'SettingsTest',
    ],
    'Managers' : [
        'ClipboardManagerTest',
        'FeedbackManagerTest',
        'NameManagerTest',
    ],
    'Math' : [
        'AnimationTest',
        'BevelTest',
        'BevelerTest',
        'BoundsTest',
        'ColorTest',
        'ColorRingTest',
        'CurvesTest',
        'DimensionalityTest',
        'FrustumTest',
        'IntersectionTest',
        'LinearTest',
        'MathToStringTest',
        'MeshBuildingTest',
        'MeshClippingTest',
        'MeshSlicingTest',
        'MeshUtilsTest',
        'ModelMeshBinaryTest',
        'PlaneTest',
        'Point3fMapTest',
        'PolyMeshTest',
        'PolygonTest',
        'ProfileTest',
        'Snap2DTest',
        'Snap3DTest',
        'SpinTest',
        'TaperTest',
        'TextUtilsTest',
        'TriMeshBinaryTest',
        'TriangulationTest',
    ],
    'Models' : [
        'BentModelTest',
        'BeveledModelTest',
        'CSGModelTest',
        'ClippedModelTest',
        'ConvertedModelTest',
        'CylinderModelTest',
        'ExtrudedModelTest',
        'HullModelTest',
        'ImportedModelTest',
        'MirroredModelTest',
        'ModelTest',
        'RevSurfModelTest',
        'RootModelTest',
        'SphereModelTest',
        'TaperedModelTest',
        'TextModelTest',
        'TorusModelTest',
        'TwistedModelTest',
    ],
    'Panes' : [
        'ButtonPaneTest',
        'CheckboxPaneTest',
        'DropdownPaneTest',
        'PaneTest',
        'PaneTestBase',
        'TextPaneTest',
    ],
    'Parser' : [
        'ConstantTest',
        'CopyTest',
        'ErrorTest',
        'ExceptionTest',
        'FieldTest',
        'IncludeTest',
        'InstanceStoreTest',
        'ObjectTest',
        'ParserTestBase',
        'ParsingTest',
        'RegistryTest',
        'ScopingTest',
        'TemplateTest',
        'WritingTest',
    ],
    'Place' : [
        'DragInfoTest',
        'PrecisionStoreTest',
        'TargetTest',
    ],
    'Session' : [
        'CSGSessionTest',
        'ClipSessionTest',
        'CopyBeveledSessionTest',
        'EmptySessionTest',
        'MirrorSessionTest',
        'PasteSessionTest',
        'RevSurfSessionTest',
        'TransformSessionTest',
        'UndoSessionTest',
    ],
    'SG' : [
        'CameraTest',
        'CloneTest',
        'ColorMapTest',
        'CoordConvTest',
        'FileMapTest',
        'ImageTest',
        'IntersectorTest',
        'NodeBoundsTest',
        'NodePathTest',
        'NodeTest',
        'ReaderTest',
        'RenderTest',
        'SGObjectTest',
        'SearchTest',
        'SetUpIonTest',
        'ShaderProgramTest',
        'ShapeTest',
        'StateTableTest',
        'TextTest',
        'UniformTest',
    ],
    'Selection' : [
        'SelPathTest',
        'SelectionTest',
    ],
    'Sim' : [
        'EmptySimTest',
        'HoverSimTest',
    ],
    'Timing' : [
        'TimingTest',
    ],
    'Util' : [
        'AlarmTest',
        'AssertTest',
        'DelayTest',
        'ExceptionTest',
        'FilePathListTest',
        'FilePathTest',
        'FlagsTest',
        'NotifierTest',
        'ReadTest',
        'StringTest',
        'UTimeTest',
        'UtilTest',
        'WriteTest',
    ],
    'Widgets' : [
        'AxisWidgetTest',
        'CompositeWidgetTest',
        'DiscWidgetTest',
        'DragTester',
        'GenericWidgetTest',
        'IconSwitcherWidgetTest',
        'IconWidgetTest',
        'PlaneWidgetTest',
        'PushButtonWidgetTest',
        'RadialLayoutWidgetTest',
        'ScaleWidgetTest',
        'Slider1DWidgetTest',
        'Slider2DWidgetTest',
        'SphereWidgetTest',
        'SpinWidgetTest',
        'StageWidgetTest',
        'TargetWidgetTest',
        'WidgetTest',
    ],
}

# -----------------------------------------------------------------------------
# Building tests.
# -----------------------------------------------------------------------------

ion_objects  = [ion_env.SharedObject(source=f'#$BUILD_DIR/ionsrc/ion/{src}')
                for src in ion_test_sources]

test_sources  = main_test_sources + [f'{cat}/{src}.cpp'
                                     for cat, sources in test_source_dict.items()
                                     for src in sources]
test_defines  = list(test_env['CPPDEFINES']) + [('IN_UNIT_TEST', 1)]
test_cpppaths = test_env['CPPPATH'] + ['#/src/Tests/']
test_objects  = ion_objects + [test_env.SharedObject(source=src,
                                                     CPPDEFINES=test_defines,
                                                     CPPPATH=test_cpppaths)
                               for src in test_sources]

# Build all unit tests into a single program.
test_program = test_env.Program('UnitTest', test_objects)

test_env.Alias('Tests', test_program)

# -----------------------------------------------------------------------------
# Running tests.
# -----------------------------------------------------------------------------

# The TESTCATEGORIES argument can be used to limit the test categories to
# run. It is a comma-separated list of categories. The TESTFILTER argument is
# passed as '--gtest_filter' to the test program to further filter the test
# names.
test_categories_arg = ARGUMENTS.get('TESTCATEGORIES')
test_filter_arg     = ARGUMENTS.get('TESTFILTER')

# Verify categories and collect test names.
categories = test_categories_arg.split(',') if test_categories_arg else []
cat_names = []
for cat in categories:
    if not cat in test_source_dict:
        print(f'*** Unknown test category "{cat}"')
        Exit()
    else:
        cat_names += [basename(src) for src in test_source_dict[cat]]

# Set up the test filter based on the arguments.
test_filter = ':'.join([f'{name}*' for name in cat_names]) if cat_names else ''
if test_filter_arg:
    test_filter = (f'{test_filter}:{test_filter_arg}' if test_filter
                   else test_filter_arg)

test_args = ' '.join([
  '--gtest_catch_exceptions=0',   # Let exceptions be handled outside gtest.
  ('--gtest_filter="%s"' % test_filter) if test_filter else '',
])

test_env.Alias('RunTests', test_program, f'$RUN_PROGRAM $SOURCE {test_args}')

# Make sure test run targets are always considered out of date.
test_env.AlwaysBuild('RunTests')

# Special alias for listing test categories.
all_categories = ', '.join(test_source_dict.keys())
test_env.Alias('ListTestCategories',
               test_env.Command('phony', [],
                                f'echo "Test categories: {all_categories}"'))

# -----------------------------------------------------------------------------
# Generating coverage results. (Linux platform, 'cov' mode only)
# -----------------------------------------------------------------------------

if platform == 'linux' and mode == 'cov':
    config_file   = '#/gcovr.cfg'
    coverage_file = test_env.File('#$BUILD_DIR/coverage/index.html').abspath
    gen_coverage = test_env.Command(
        coverage_file, [test_program, config_file],
        [
            # Run the test.
            f'$SOURCE {test_args}',
            # Generate coverage .
            'mkdir -p $BUILD_DIR/coverage',
            'gcovr',
            f'echo === Coverage results in {coverage_file}'
        ])

    test_env.Alias('Coverage', gen_coverage)
