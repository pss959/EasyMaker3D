from os import environ

Import('test_env')

# Change these to speed up testing temporarily
DO_SESSION_TESTS = True
DO_SIM_TESTS     = True

platform = test_env['PLATFORM']
mode     = test_env['MODE']

test_sources = [
    'AlarmTest.cpp',
    'AppTestBase.cpp',
    'AssertTest.cpp',
    'BentModelTest.cpp',
    'BeveledModelTest.cpp',
    'BevelerTest.cpp',
    'BoundsTest.cpp',
    'ClipboardTest.cpp',
    'ClippedModelTest.cpp',
    'CloneTest.cpp',
    'ColorTest.cpp',
    'CommandListTest.cpp',
    'CoordConvTest.cpp',
    'CustomShortcutTest.cpp',
    'DelayTest.cpp',
    'DimensionalityTest.cpp',
    'EnumTest.cpp',
    'EventTest.cpp',
    'ExceptionTest.cpp',
    'FeedbackManagerTest.cpp',
    'FilePathListTest.cpp',
    'FilePathTest.cpp',
    'FlagsTest.cpp',
    'FrustumTest.cpp',
    'HandTest.cpp',
    'IntersectorTest.cpp',
    'LinearTest.cpp',
    'MeshBuildingTest.cpp',
    'MeshClippingTest.cpp',
    'MeshUtilsTest.cpp',
    'ModelMeshBinaryTest.cpp',
    'ModelTest.cpp',
    'NameManagerTest.cpp',
    'NodeBoundsTest.cpp',
    'NodePathTest.cpp',
    'NodeTest.cpp',
    'PaneTest.cpp',
    'ParserTest.cpp',
    'PlaneTest.cpp',
    'Point3fMapTest.cpp',
    'PolyMeshTest.cpp',
    'PolygonTest.cpp',
    'ProfileTest.cpp',
    'ReadFileTest.cpp',
    'ReadSTLTest.cpp',
    'ReaderTest.cpp',
    'RegistryTest.cpp',
    'RevSurfModelTest.cpp',
    'ScaleCommandTest.cpp',
    'SceneTestBase.cpp',
    'SearchTest.cpp',
    'SliceTest.cpp',
    'StringTest.cpp',
    'TaperedModelTest.cpp',
    'TestBase.cpp',
    'TextUtilsTest.cpp',
    'TimingTest.cpp',
    'TriMeshBinaryTest.cpp',
    'TriangulationTest.cpp',
    'UTimeTest.cpp',
    'UtilTest.cpp',
    'WriteSTLTest.cpp',
]

# Session tests:
if DO_SESSION_TESTS:
    test_sources += [
        'SessionTests/CSGSessionTest.cpp',
        'SessionTests/ClipSessionTest.cpp',
        'SessionTests/CopyBeveledSessionTest.cpp',
        'SessionTests/EmptySessionTest.cpp',
        'SessionTests/MirrorSessionTest.cpp',
        'SessionTests/PasteSessionTest.cpp',
        'SessionTests/RevSurfSessionTest.cpp',
        'SessionTests/SessionTestBase.cpp',
        'SessionTests/TransformSessionTest.cpp',
        'SessionTests/UndoSessionTest.cpp',
    ]

# Simulation tests:
if DO_SIM_TESTS:
    test_sources += [
    'SimTests/EmptySimTest.cpp',
    'SimTests/HoverSimTest.cpp',
    'SimTests/SimTestBase.cpp',
]

# Add the main() function that runs all tests.
test_sources.append('TestMain.cpp')

# -----------------------------------------------------------------------------
# Building tests.
# -----------------------------------------------------------------------------

test_defines  = list(test_env['CPPDEFINES']) + [('IN_UNIT_TEST', 1)]
test_cpppaths = test_env['CPPPATH'] + ['#/src/Tests/']
test_objects  = [test_env.SharedObject(source=source, CPPDEFINES=test_defines,
                                       CPPPATH=test_cpppaths)
                 for source in test_sources]

# Build all unit tests into a single program.
test_program = test_env.Program('UnitTest', test_objects)

test_env.Alias('Tests', test_program)

# -----------------------------------------------------------------------------
# Running tests.
# -----------------------------------------------------------------------------

test_filter = ARGUMENTS.get('TESTFILTER')
test_args = ' '.join([
  '--gtest_catch_exceptions=0',   # Let exceptions be handled outside gtest.
  ('--gtest_filter="%s"' % test_filter) if test_filter else '',
])

test_env.Alias('RunTests', test_program, f'$RUN_PROGRAM $SOURCE {test_args}')

# Make sure test run targets are always considered out of date.
test_env.AlwaysBuild('RunTests')

# -----------------------------------------------------------------------------
# Generating coverage results. (Linux platform, 'cov' mode only)
# -----------------------------------------------------------------------------

if platform == 'linux' and mode == 'cov':
    config_file   = '#/gcovr.cfg'
    coverage_file = test_env.File('#$BUILD_DIR/coverage/index.html').abspath
    gen_coverage = test_env.Command(
        coverage_file, [test_program, config_file],
        [
            # Run the test.
            f'$SOURCE {test_args}',
            # Generate coverage .
            'mkdir -p $BUILD_DIR/coverage',
            'gcovr',
            f'echo === Coverage results in {coverage_file}'
        ])

    test_env.Alias('Coverage', gen_coverage)
