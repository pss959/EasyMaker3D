// Copyright 2015 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "image_compression/internal/dxtc_const_color_table.h"

#include "base/integral_types.h"

namespace image_codec_compression {

namespace {
/*
// There are 256 rows, one for each possible 8bit color channel value.
// Each 8 bytes in a row are in the order:
//    red/blue 1/3 endpoints, red/blue 1/2 endpoints,
//    green 1/3 endpoints, and green 1/2 endpoints.
// The 2/3 endpoints cases use the same colors as the 1/3 cases, just with the
// order flipped.  Whether to flip or not depends on the DXT rule which says the
// 565 color0 value must be larger than the color1 value.
//
// The table was generated with the following bit of Python:

   def findEndpoints(uint8_value, channelBits, t):
     maxValue = 1 << channelBits
     minErr = 256
     minI, minJ = -1, -1
     float_value = uint8_value/255.0
     for i in xrange(maxValue):
        for j in xrange(maxValue):
           err = abs(float_value - ((1.-t)*i + t*j)/(maxValue-1.0))
           if err < minErr:
              minErr = err
              minI, minJ = i, j
     return (minI, minJ)

   def main():
     format = ', '.join(('%s',) * 8)
     for uint8_value in xrange(256):
       row = findEndpoints(uint8_value, 5, 1/3.) + \
           findEndpoints(uint8_value, 5, 1/2.) + \
           findEndpoints(uint8_value, 6, 1/3.) + \
           findEndpoints(uint8_value, 6, 1/2.)
       print '{',
       print format % row,
       print '},'

   if __name__ == "__main__":
     main()
*/
uint8 best_endpoints_table[256][8] = {
/*  0*/  { 0, 0, 0, 0, 0, 0, 0, 0 },
/*  1*/  { 0, 0, 0, 0, 0, 1, 0, 0 },
/*  2*/  { 0, 1, 0, 0, 0, 1, 0, 1 },
/*  3*/  { 0, 1, 0, 1, 1, 0, 0, 1 },
/*  4*/  { 0, 1, 0, 1, 0, 3, 0, 2 },
/*  5*/  { 0, 2, 0, 1, 0, 4, 0, 2 },
/*  6*/  { 1, 0, 0, 1, 1, 2, 0, 3 },
/*  7*/  { 0, 3, 0, 2, 1, 3, 0, 3 },
/*  8*/  { 0, 3, 0, 2, 0, 6, 0, 4 },
/*  9*/  { 0, 3, 0, 2, 0, 7, 0, 4 },
/* 10*/  { 0, 4, 0, 2, 2, 3, 0, 5 },
/* 11*/  { 1, 2, 0, 3, 1, 6, 0, 5 },
/* 12*/  { 1, 2, 0, 3, 0, 9, 0, 6 },
/* 13*/  { 0, 5, 0, 3, 0, 10, 0, 6 },
/* 14*/  { 1, 3, 0, 3, 5, 0, 0, 7 },
/* 15*/  { 1, 3, 0, 4, 5, 1, 0, 7 },
/* 16*/  { 0, 6, 0, 4, 0, 12, 0, 8 },
/* 17*/  { 0, 6, 0, 4, 0, 13, 0, 8 },
/* 18*/  { 0, 7, 0, 4, 2, 9, 0, 9 },
/* 19*/  { 0, 7, 0, 5, 1, 12, 0, 9 },
/* 20*/  { 2, 3, 0, 5, 0, 15, 0, 10 },
/* 21*/  { 0, 8, 0, 5, 0, 16, 0, 10 },
/* 22*/  { 1, 6, 0, 5, 2, 12, 0, 11 },
/* 23*/  { 1, 6, 0, 6, 1, 15, 0, 11 },
/* 24*/  { 0, 9, 0, 6, 0, 18, 0, 12 },
/* 25*/  { 4, 1, 0, 6, 0, 19, 0, 12 },
/* 26*/  { 4, 1, 0, 6, 2, 15, 0, 13 },
/* 27*/  { 0, 10, 0, 7, 9, 2, 0, 13 },
/* 28*/  { 5, 0, 0, 7, 0, 21, 0, 14 },
/* 29*/  { 0, 11, 0, 7, 9, 3, 0, 14 },
/* 30*/  { 0, 11, 0, 7, 10, 2, 0, 15 },
/* 31*/  { 5, 1, 0, 8, 0, 23, 0, 15 },
/* 32*/  { 0, 12, 0, 8, 0, 24, 0, 16 },
/* 33*/  { 5, 2, 0, 8, 10, 4, 0, 16 },
/* 34*/  { 5, 2, 0, 8, 2, 21, 0, 17 },
/* 35*/  { 0, 13, 0, 9, 0, 26, 0, 17 },
/* 36*/  { 2, 9, 0, 9, 1, 25, 0, 18 },
/* 37*/  { 2, 9, 0, 9, 13, 1, 0, 18 },
/* 38*/  { 0, 14, 0, 9, 2, 24, 0, 19 },
/* 39*/  { 1, 12, 0, 9, 0, 29, 0, 19 },
/* 40*/  { 0, 15, 0, 10, 1, 28, 0, 20 },
/* 41*/  { 0, 15, 0, 10, 13, 4, 0, 20 },
/* 42*/  { 0, 15, 0, 10, 15, 1, 0, 21 },
/* 43*/  { 0, 16, 0, 10, 0, 32, 0, 21 },
/* 44*/  { 2, 12, 0, 11, 1, 31, 0, 22 },
/* 45*/  { 2, 12, 0, 11, 15, 3, 0, 22 },
/* 46*/  { 0, 17, 0, 11, 15, 4, 0, 23 },
/* 47*/  { 1, 15, 0, 11, 0, 35, 0, 23 },
/* 48*/  { 0, 18, 0, 12, 1, 34, 0, 24 },
/* 49*/  { 0, 18, 0, 12, 15, 6, 0, 24 },
/* 50*/  { 8, 2, 0, 12, 15, 7, 0, 25 },
/* 51*/  { 0, 19, 0, 12, 0, 38, 0, 25 },
/* 52*/  { 0, 19, 0, 13, 1, 37, 0, 26 },
/* 53*/  { 2, 15, 0, 13, 15, 9, 0, 26 },
/* 54*/  { 0, 20, 0, 13, 15, 10, 0, 27 },
/* 55*/  { 9, 2, 0, 13, 0, 41, 0, 27 },
/* 56*/  { 9, 2, 0, 14, 1, 40, 0, 28 },
/* 57*/  { 0, 21, 0, 14, 15, 12, 0, 28 },
/* 58*/  { 9, 3, 0, 14, 0, 43, 0, 29 },
/* 59*/  { 0, 22, 0, 14, 0, 44, 0, 29 },
/* 60*/  { 0, 22, 0, 15, 20, 4, 0, 30 },
/* 61*/  { 10, 2, 0, 15, 15, 15, 0, 30 },
/* 62*/  { 0, 23, 0, 15, 0, 46, 0, 31 },
/* 63*/  { 0, 23, 0, 15, 0, 47, 0, 31 },
/* 64*/  { 9, 5, 0, 16, 23, 1, 0, 32 },
/* 65*/  { 0, 24, 0, 16, 20, 8, 0, 32 },
/* 66*/  { 10, 4, 0, 16, 0, 49, 0, 33 },
/* 67*/  { 10, 4, 0, 16, 0, 50, 0, 33 },
/* 68*/  { 0, 25, 0, 17, 1, 48, 0, 34 },
/* 69*/  { 2, 21, 0, 17, 20, 11, 0, 34 },
/* 70*/  { 0, 26, 0, 17, 0, 52, 0, 35 },
/* 71*/  { 0, 26, 0, 17, 0, 53, 0, 35 },
/* 72*/  { 4, 18, 0, 18, 1, 51, 0, 36 },
/* 73*/  { 1, 25, 0, 18, 23, 8, 0, 36 },
/* 74*/  { 1, 25, 0, 18, 0, 55, 0, 37 },
/* 75*/  { 13, 1, 0, 18, 0, 56, 0, 37 },
/* 76*/  { 0, 28, 0, 18, 27, 2, 0, 38 },
/* 77*/  { 2, 24, 0, 19, 23, 11, 0, 38 },
/* 78*/  { 2, 24, 0, 19, 0, 58, 0, 39 },
/* 79*/  { 0, 29, 0, 19, 0, 59, 0, 39 },
/* 80*/  { 4, 21, 0, 19, 27, 5, 0, 40 },
/* 81*/  { 1, 28, 0, 20, 26, 8, 0, 40 },
/* 82*/  { 1, 28, 0, 20, 0, 61, 0, 41 },
/* 83*/  { 13, 4, 0, 20, 0, 62, 0, 41 },
/* 84*/  { 0, 31, 0, 20, 27, 8, 0, 42 },
/* 85*/  { 0, 31, 0, 21, 0, 63, 0, 42 },
/* 86*/  { 15, 1, 0, 21, 1, 62, 0, 42 },
/* 87*/  { 1, 30, 0, 21, 5, 54, 0, 43 },
/* 88*/  { 4, 24, 0, 21, 27, 11, 0, 43 },
/* 89*/  { 4, 24, 0, 22, 2, 62, 0, 44 },
/* 90*/  { 1, 31, 0, 22, 2, 63, 0, 44 },
/* 91*/  { 15, 3, 0, 22, 5, 57, 0, 45 },
/* 92*/  { 3, 28, 0, 22, 27, 14, 0, 45 },
/* 93*/  { 3, 28, 0, 23, 3, 63, 0, 46 },
/* 94*/  { 15, 4, 0, 23, 4, 62, 0, 46 },
/* 95*/  { 2, 31, 0, 23, 5, 60, 0, 47 },
/* 96*/  { 4, 27, 0, 23, 27, 17, 0, 47 },
/* 97*/  { 4, 27, 0, 24, 5, 62, 0, 48 },
/* 98*/  { 3, 30, 0, 24, 6, 61, 0, 48 },
/* 99*/  { 15, 6, 0, 24, 5, 63, 0, 49 },
/*100*/  { 15, 6, 0, 24, 27, 20, 0, 49 },
/*101*/  { 3, 31, 0, 25, 6, 63, 0, 50 },
/*102*/  { 15, 7, 0, 25, 7, 62, 0, 50 },
/*103*/  { 5, 28, 0, 25, 8, 60, 0, 51 },
/*104*/  { 5, 28, 0, 25, 27, 23, 0, 51 },
/*105*/  { 4, 30, 0, 26, 8, 62, 0, 52 },
/*106*/  { 4, 31, 0, 26, 9, 61, 0, 52 },
/*107*/  { 15, 9, 0, 26, 8, 63, 0, 53 },
/*108*/  { 15, 9, 0, 26, 27, 26, 0, 53 },
/*109*/  { 6, 28, 0, 27, 9, 63, 0, 54 },
/*110*/  { 15, 10, 0, 27, 10, 62, 0, 54 },
/*111*/  { 15, 10, 0, 27, 40, 2, 0, 55 },
/*112*/  { 5, 31, 0, 27, 27, 29, 0, 55 },
/*113*/  { 20, 1, 0, 27, 11, 62, 0, 56 },
/*114*/  { 6, 30, 0, 28, 27, 30, 0, 56 },
/*115*/  { 6, 30, 0, 28, 40, 5, 0, 57 },
/*116*/  { 15, 12, 0, 28, 12, 62, 0, 57 },
/*117*/  { 6, 31, 0, 28, 12, 63, 0, 58 },
/*118*/  { 15, 13, 0, 29, 27, 33, 0, 58 },
/*119*/  { 15, 13, 0, 29, 40, 8, 0, 59 },
/*120*/  { 8, 28, 0, 29, 14, 61, 0, 59 },
/*121*/  { 20, 4, 0, 29, 14, 62, 0, 60 },
/*122*/  { 20, 4, 0, 30, 27, 36, 0, 60 },
/*123*/  { 7, 31, 0, 30, 40, 11, 0, 61 },
/*124*/  { 15, 15, 0, 30, 15, 62, 0, 61 },
/*125*/  { 9, 28, 0, 30, 15, 63, 0, 62 },
/*126*/  { 9, 28, 0, 31, 27, 39, 0, 62 },
/*127*/  { 15, 16, 0, 31, 43, 8, 0, 63 },
/*128*/  { 8, 31, 0, 31, 17, 61, 0, 63 },
/*129*/  { 23, 1, 0, 31, 17, 62, 1, 63 },
/*130*/  { 23, 1, 1, 31, 40, 16, 1, 63 },
/*131*/  { 9, 30, 1, 31, 17, 63, 2, 63 },
/*132*/  { 20, 8, 1, 31, 18, 62, 2, 63 },
/*133*/  { 9, 31, 1, 31, 18, 63, 3, 63 },
/*134*/  { 9, 31, 2, 31, 40, 19, 3, 63 },
/*135*/  { 10, 29, 2, 31, 20, 60, 4, 63 },
/*136*/  { 11, 28, 2, 31, 21, 59, 4, 63 },
/*137*/  { 11, 28, 2, 31, 20, 62, 5, 63 },
/*138*/  { 10, 30, 3, 31, 40, 22, 5, 63 },
/*139*/  { 10, 31, 3, 31, 51, 1, 6, 63 },
/*140*/  { 20, 11, 3, 31, 21, 62, 6, 63 },
/*141*/  { 20, 11, 3, 31, 21, 63, 7, 63 },
/*142*/  { 12, 28, 4, 31, 43, 19, 7, 63 },
/*143*/  { 11, 30, 4, 31, 22, 62, 8, 63 },
/*144*/  { 11, 31, 4, 31, 24, 59, 8, 63 },
/*145*/  { 11, 31, 4, 31, 22, 63, 9, 63 },
/*146*/  { 13, 27, 4, 31, 43, 22, 9, 63 },
/*147*/  { 12, 30, 5, 31, 24, 61, 10, 63 },
/*148*/  { 12, 30, 5, 31, 24, 62, 10, 63 },
/*149*/  { 23, 8, 5, 31, 25, 60, 11, 63 },
/*150*/  { 12, 31, 5, 31, 46, 19, 11, 63 },
/*151*/  { 13, 29, 6, 31, 25, 62, 12, 63 },
/*152*/  { 13, 29, 6, 31, 48, 17, 12, 63 },
/*153*/  { 14, 28, 6, 31, 25, 63, 13, 63 },
/*154*/  { 27, 2, 6, 31, 46, 22, 13, 63 },
/*155*/  { 13, 31, 7, 31, 28, 59, 14, 63 },
/*156*/  { 13, 31, 7, 31, 48, 20, 14, 63 },
/*157*/  { 23, 11, 7, 31, 27, 62, 15, 63 },
/*158*/  { 24, 10, 7, 31, 49, 19, 15, 63 },
/*159*/  { 24, 10, 8, 31, 28, 62, 16, 63 },
/*160*/  { 14, 30, 8, 31, 48, 23, 16, 63 },
/*161*/  { 14, 31, 8, 31, 28, 63, 17, 63 },
/*162*/  { 27, 5, 8, 31, 49, 22, 17, 63 },
/*163*/  { 27, 5, 9, 31, 31, 59, 18, 63 },
/*164*/  { 15, 30, 9, 31, 48, 26, 18, 63 },
/*165*/  { 26, 8, 9, 31, 30, 62, 19, 63 },
/*166*/  { 24, 13, 9, 31, 51, 21, 19, 63 },
/*167*/  { 24, 13, 10, 31, 31, 62, 20, 63 },
/*168*/  { 15, 31, 10, 31, 48, 29, 20, 63 },
/*169*/  { 17, 28, 10, 31, 31, 63, 21, 63 },
/*170*/  { 17, 28, 10, 31, 32, 62, 21, 63 },
/*171*/  { 27, 8, 11, 31, 34, 59, 21, 63 },
/*172*/  { 16, 31, 11, 31, 51, 25, 22, 63 },
/*173*/  { 26, 11, 11, 31, 33, 62, 22, 63 },
/*174*/  { 26, 11, 11, 31, 33, 63, 23, 63 },
/*175*/  { 24, 16, 12, 31, 34, 62, 23, 63 },
/*176*/  { 17, 30, 12, 31, 51, 28, 24, 63 },
/*177*/  { 17, 31, 12, 31, 34, 63, 24, 63 },
/*178*/  { 17, 31, 12, 31, 35, 62, 25, 63 },
/*179*/  { 27, 11, 13, 31, 37, 59, 25, 63 },
/*180*/  { 18, 30, 13, 31, 51, 31, 26, 63 },
/*181*/  { 27, 12, 13, 31, 36, 62, 26, 63 },
/*182*/  { 27, 12, 13, 31, 36, 63, 27, 63 },
/*183*/  { 24, 19, 13, 31, 37, 62, 27, 63 },
/*184*/  { 18, 31, 14, 31, 51, 34, 28, 63 },
/*185*/  { 18, 31, 14, 31, 37, 63, 28, 63 },
/*186*/  { 24, 20, 14, 31, 38, 62, 29, 63 },
/*187*/  { 27, 14, 14, 31, 48, 43, 29, 63 },
/*188*/  { 19, 31, 15, 31, 51, 37, 30, 63 },
/*189*/  { 19, 31, 15, 31, 39, 62, 30, 63 },
/*190*/  { 27, 15, 15, 31, 39, 63, 31, 63 },
/*191*/  { 24, 22, 15, 31, 48, 46, 31, 63 },
/*192*/  { 20, 30, 16, 31, 51, 40, 32, 63 },
/*193*/  { 20, 30, 16, 31, 40, 63, 32, 63 },
/*194*/  { 24, 23, 16, 31, 41, 62, 33, 63 },
/*195*/  { 27, 17, 16, 31, 48, 49, 33, 63 },
/*196*/  { 27, 17, 17, 31, 51, 43, 34, 63 },
/*197*/  { 21, 30, 17, 31, 42, 62, 34, 63 },
/*198*/  { 27, 18, 17, 31, 42, 63, 35, 63 },
/*199*/  { 24, 25, 17, 31, 51, 45, 35, 63 },
/*200*/  { 24, 25, 18, 31, 51, 46, 36, 63 },
/*201*/  { 21, 31, 18, 31, 48, 53, 36, 63 },
/*202*/  { 24, 26, 18, 31, 44, 62, 37, 63 },
/*203*/  { 27, 20, 18, 31, 51, 48, 37, 63 },
/*204*/  { 27, 20, 19, 31, 51, 49, 38, 63 },
/*205*/  { 22, 31, 19, 31, 48, 56, 38, 63 },
/*206*/  { 27, 21, 19, 31, 45, 63, 39, 63 },
/*207*/  { 27, 21, 19, 31, 51, 51, 39, 63 },
/*208*/  { 24, 28, 20, 31, 51, 52, 40, 63 },
/*209*/  { 23, 30, 20, 31, 48, 59, 40, 63 },
/*210*/  { 24, 29, 20, 31, 47, 62, 41, 63 },
/*211*/  { 24, 29, 20, 31, 51, 54, 41, 63 },
/*212*/  { 27, 23, 21, 31, 51, 55, 42, 63 },
/*213*/  { 24, 30, 21, 31, 48, 62, 42, 63 },
/*214*/  { 27, 24, 21, 31, 48, 63, 43, 63 },
/*215*/  { 27, 24, 21, 31, 51, 57, 43, 63 },
/*216*/  { 24, 31, 22, 31, 51, 58, 44, 63 },
/*217*/  { 25, 29, 22, 31, 49, 63, 44, 63 },
/*218*/  { 25, 30, 22, 31, 50, 62, 45, 63 },
/*219*/  { 25, 30, 22, 31, 51, 60, 45, 63 },
/*220*/  { 27, 26, 22, 31, 51, 61, 46, 63 },
/*221*/  { 25, 31, 23, 31, 51, 62, 46, 63 },
/*222*/  { 25, 31, 23, 31, 52, 61, 47, 63 },
/*223*/  { 27, 27, 23, 31, 51, 63, 47, 63 },
/*224*/  { 26, 30, 23, 31, 54, 58, 48, 63 },
/*225*/  { 26, 30, 24, 31, 52, 63, 48, 63 },
/*226*/  { 26, 30, 24, 31, 53, 62, 49, 63 },
/*227*/  { 26, 31, 24, 31, 54, 60, 49, 63 },
/*228*/  { 27, 29, 24, 31, 53, 63, 50, 63 },
/*229*/  { 28, 28, 25, 31, 54, 62, 50, 63 },
/*230*/  { 28, 28, 25, 31, 54, 62, 51, 63 },
/*231*/  { 27, 30, 25, 31, 54, 63, 51, 63 },
/*232*/  { 27, 31, 25, 31, 55, 62, 52, 63 },
/*233*/  { 27, 31, 26, 31, 55, 63, 52, 63 },
/*234*/  { 27, 31, 26, 31, 55, 63, 53, 63 },
/*235*/  { 28, 30, 26, 31, 57, 60, 53, 63 },
/*236*/  { 30, 26, 26, 31, 56, 63, 54, 63 },
/*237*/  { 30, 26, 27, 31, 57, 62, 54, 63 },
/*238*/  { 28, 31, 27, 31, 57, 62, 55, 63 },
/*239*/  { 30, 27, 27, 31, 57, 63, 55, 63 },
/*240*/  { 29, 30, 27, 31, 58, 62, 56, 63 },
/*241*/  { 29, 30, 28, 31, 58, 63, 56, 63 },
/*242*/  { 29, 30, 28, 31, 58, 63, 57, 63 },
/*243*/  { 29, 31, 28, 31, 60, 60, 57, 63 },
/*244*/  { 29, 31, 28, 31, 59, 63, 58, 63 },
/*245*/  { 30, 29, 29, 31, 60, 62, 58, 63 },
/*246*/  { 31, 28, 29, 31, 60, 62, 59, 63 },
/*247*/  { 30, 30, 29, 31, 60, 63, 59, 63 },
/*248*/  { 30, 30, 29, 31, 61, 62, 60, 63 },
/*249*/  { 30, 31, 30, 31, 61, 63, 60, 63 },
/*250*/  { 30, 31, 30, 31, 61, 63, 61, 63 },
/*251*/  { 31, 30, 30, 31, 63, 60, 61, 63 },
/*252*/  { 31, 30, 30, 31, 62, 63, 62, 63 },
/*253*/  { 31, 30, 31, 31, 63, 62, 62, 63 },
/*254*/  { 31, 31, 31, 31, 63, 62, 63, 63 },
/*255*/  { 31, 31, 31, 31, 63, 63, 63, 63 },
};

}  // namespace


int GetBestDxtcConstColors(const RgbInt& target_color,
                           Rgb565* color0, Rgb565* color1,
                           bool always_4_color_case) {
  Rgb565 single_color = QuantizeToRgb565(target_color);
  uint8 which_bits = 0;
  RgbInt color_int = ExtendToRgbInt(single_color);
  int min_error = ComputeDifferenceLuminanceFast(target_color, color_int);

  *color0 = single_color;
  *color1 = single_color;

  RgbInt color_int0, color_int1;
  int error;

  if (!always_4_color_case) {
    Rgb565 one_halves[2];
    one_halves[0].r = best_endpoints_table[target_color.r][2];
    one_halves[1].r = best_endpoints_table[target_color.r][3];
    one_halves[0].g = best_endpoints_table[target_color.g][6];
    one_halves[1].g = best_endpoints_table[target_color.g][7];
    one_halves[0].b = best_endpoints_table[target_color.b][2];
    one_halves[1].b = best_endpoints_table[target_color.b][3];

    // Try halves first, because they have more consistent reconstruction
    // on a variety of graphics hardware than thirds.  (Some hardware uses 3/8
    // instead of 1/3).
    color_int0 = ExtendToRgbInt(one_halves[0]);
    color_int1 = ExtendToRgbInt(one_halves[1]);
    color_int = CombineRgbIntFast<1, 1>(color_int0, color_int1);
    error = ComputeDifferenceLuminanceFast(target_color, color_int);
    if (error < min_error) {
      which_bits = 2;
      // For halves mode in DXT, color0 must be less than color1.
      if (ToUInt16(one_halves[0]) < ToUInt16(one_halves[1])) {
        *color0 = one_halves[0];
        *color1 = one_halves[1];
      } else {
        *color0 = one_halves[1];
        *color1 = one_halves[0];
      }
      min_error = error;
    }
  }

  Rgb565 one_thirds[2];
  one_thirds[0].r = best_endpoints_table[target_color.r][0];
  one_thirds[1].r = best_endpoints_table[target_color.r][1];
  one_thirds[0].g = best_endpoints_table[target_color.g][4];
  one_thirds[1].g = best_endpoints_table[target_color.g][5];
  one_thirds[0].b = best_endpoints_table[target_color.b][0];
  one_thirds[1].b = best_endpoints_table[target_color.b][1];
  color_int0 = ExtendToRgbInt(one_thirds[0]);
  color_int1 = ExtendToRgbInt(one_thirds[1]);
  color_int = CombineRgbIntFast<2, 1>(color_int0, color_int1);
  error = ComputeDifferenceLuminanceFast(target_color, color_int);
  if (error < min_error) {
    min_error = error;
    // For thirds mode in DXT, color0 must be greater than color1.
    if (ToUInt16(one_thirds[0]) > ToUInt16(one_thirds[1])) {
      which_bits = 2;
      *color0 = one_thirds[0];
      *color1 = one_thirds[1];
    } else {
      which_bits = 3;
      *color0 = one_thirds[1];
      *color1 = one_thirds[0];
    }
  }

  return which_bits;
}

}  // namespace image_codec_compression
