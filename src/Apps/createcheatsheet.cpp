#include <cctype>
#include <iostream>
#include <string>

#include <ion/base/stringutils.h>

#include "Base/ActionMap.h"
#include "Base/HelpMap.h"
#include "Enums/Action.h"
#include "Enums/ActionCategory.h"
#include "Handlers/ShortcutHandler.h"
#include "Util/Enum.h"
#include "Util/String.h"

/// \file
/// The createcheatsheet application is used by the build to generate the Cheat
/// Sheet in the public documentation.
///
/// \ingroup Apps

// ----------------------------------------------------------------------------
// Helpers.
// ----------------------------------------------------------------------------

constinit const char kHeaderString[] =
R"(.. _cheat-sheet:

|appname| Cheat Sheet
=====================

.. This file was generated by the createcheatsheet app.

.. list-table::
   :widths: auto
   :header-rows: 1
   :class: cheat-sheet-table

   * - Category
     - | Action Name /
       | User Guide Link
     - | Radial Menu
       | Icon
     - Description
     - | Keyboard
       | Shortcut
     - | Controller
       | Shortcut
)";

static void WriteHeader_() {
    std::cout << kHeaderString;
}

static Str WrapShortcut_(const Str &str) {
    Str new_str = str;

    if (! new_str.empty()) {
        // Replace space so it is visible.
        if (new_str == " ")
            new_str = "Space";

        // Non-empty shortcuts must be wrapped with the role.
        new_str = ":shortcut:`" + new_str + "`";
    }

    return new_str;
}

static void WriteAction_(ActionCategory cat, Action action,
                         const ShortcutHandler &sh, const HelpMap &hm) {
    const Str category_name = Util::EnumToWords(cat);
    const Str action_name   = Util::EnumToWords(action);
    const Str icon_name     = Util::EnumToWord(action);
    const Str ref = Util::ReplaceString(
        Util::ToLowerCase(Util::EnumToWords(action)), " ", "-");
    const Str desc =
        Util::ReplaceString(hm.GetHelpString(action), "\n", " ");

    // Get the shortcuts from the ShortcutHandler.
    Str ks, cs;
    sh.GetShortcutStrings(action, ks, cs);
    ks = WrapShortcut_(ks);
    cs = WrapShortcut_(cs);

    std::cout
        << "   * - " << category_name << "\n"
        << "     - " << icon_name << " / :ref:`" << action_name
        << " <ug-" << ref << ">`\n"
        << "     - .. menuicon:: " << icon_name << "\n"
        << "     - " << desc << "\n"
        << "     - " << ks << "\n"
        << "     - " << cs << "\n";
}

static void WriteContents_() {
    // Create a ShortcutHandler to access all shortcuts and a HelpMap for
    // accessing tooltips for action descriptions.
    ShortcutHandler sh;
    HelpMap         hm;

    ActionMap action_map;
    for (const auto cat: Util::EnumValues<ActionCategory>()) {
        for (const auto action: action_map.GetActionsInCategory(cat))
            WriteAction_(cat, action, sh, hm);
    }
}

// ----------------------------------------------------------------------------
// Mainline.
// ----------------------------------------------------------------------------

int main(int argc, const char *argv[]) {
    WriteHeader_();
    WriteContents_();
    return 0;
}
