#include <cctype>
#include <iostream>
#include <string>

#include <ion/base/stringutils.h>

#include "Base/ActionMap.h"
#include "Base/HelpMap.h"
#include "Enums/Action.h"
#include "Enums/ActionCategory.h"
#include "Handlers/ShortcutHandler.h"
#include "Util/Enum.h"
#include "Util/String.h"

// ----------------------------------------------------------------------------
// Helpers.
// ----------------------------------------------------------------------------

static const char kHeaderString[] =
R"(|appname| Cheat Sheet
=====================

.. This file was generated by the createcheatsheet app.

.. list-table::
   :widths: auto
   :header-rows: 1
   :class: cheat-sheet-table

   * - Category
     - | Action Name /
       | User Guide Link
     - | Radial Menu
       | Icon
     - Description
     - | Keyboard
       | Shortcut
     - | Controller
       | Shortcut
)";

static void WriteHeader_() {
    std::cout << kHeaderString;
}

static std::string WrapShortcut_(const std::string &str) {
    std::string new_str = str;

    if (! new_str.empty()) {
        // Replace space so it is visible.
        if (new_str == " ")
            new_str = "SPACE";

        // Non-empty shortcuts must be wrapped with the role.
        new_str = ":shortcut:`" + new_str + "`";
    }

    return new_str;
}

// Changes a keyboard shortcut if necessary to show shift modifier if the
// shortcut is upper case and to change "<Ctrl>" to "Ctrl-".
static std::string FixKeyboardShortcut_(const std::string &str) {
    using ion::base::StartsWith;

    std::string new_str;

    // Single upper-case letter.
    if (str.size() == 1U && std::isupper(str[0])) {
        new_str = "Shift-";
        new_str += std::tolower(str[0]);
    }

    // "<Ctrl>*" where "*" is an upper-case letter.
    else if (StartsWith(str, "<Ctrl>")) {
        if (str.size() == 7 && std::isupper(str[6])) {
            new_str = "Shift-Ctrl-";
            new_str += std::tolower(str[6]);
        }
        else {
            new_str = "Ctrl-" + str.substr(6);
        }
    }
    else {
        new_str = str;
    }
    return new_str;
}

static void WriteAction_(ActionCategory cat, Action action,
                         const ShortcutHandler &sh, const HelpMap &hm) {
    const std::string category_name = Util::EnumToWords(cat);
    const std::string action_name   = Util::EnumToWords(action);
    const std::string icon_name     = Util::EnumToWord(action);
    const std::string ref = Util::ReplaceString(
        Util::ToLowerCase(Util::EnumToWords(action)), " ", "-");
    const std::string desc =
        Util::ReplaceString(hm.GetHelpString(action), "\n", " ");

    // Get the shortcuts from the ShortcutHandler.
    std::string ks, cs;
    sh.GetShortcutStrings(action, ks, cs);
    ks = WrapShortcut_(FixKeyboardShortcut_(ks));
    cs = WrapShortcut_(cs);

    std::cout
        << "   * - " << category_name << "\n"
        << "     - :ref:`" << action_name << " <ug-" << ref << ">`\n"
        << "     - .. menuicon:: " << icon_name << "\n"
        << "     - " << desc << "\n"
        << "     - " << ks << "\n"
        << "     - " << cs << "\n";
}

static void WriteContents_() {
    // Create a ShortcutHandler to access all shortcuts and a HelpMap for
    // accessing tooltips for action descriptions.
    ShortcutHandler sh;
    HelpMap         hm;

    ActionMap action_map;
    for (const auto cat: Util::EnumValues<ActionCategory>()) {
        for (const auto action: action_map.GetActionsInCategory(cat))
            WriteAction_(cat, action, sh, hm);
    }
}

// ----------------------------------------------------------------------------
// Mainline.
// ----------------------------------------------------------------------------

int main(int argc, const char *argv[]) {
    WriteHeader_();
    WriteContents_();
    return 0;
}
