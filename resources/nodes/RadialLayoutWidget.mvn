RadialLayoutWidget "RadialLayoutWidget" {
  children: [
    UnscopedNode "Definitions" {
      disabled_flags: "kTraversal",
      children: [
        Node "SpokeGeom" {
          scale: 1 .6 .4,  # X scale is changed in code.
          shapes: [ Box {} ]
        }
      ]
    },

    # Torus ring for changing radius.
    DiscWidget "Ring" {
      mode: "kScaleOnly",
      apply_to_widget: False,   # Code responds to scale changes.
      inactive_color: $TARGET_COLOR,
      shapes: [
        Torus "Torus" {
          inner_radius: .2, # Changed in code.
          outer_radius: 1,  # Changed in code.
          sector_count: 72,
        }
      ]
    },

    # Parts for layout; hidden when ring is very small.
    Node "Layout" {
      disabled_flags: "kTraversal",  # Hidden to start.
      children: [
        # Rotatable start angle spoke.
        DiscWidget "StartSpoke" {
          mode: "kRotationOnly",
          inactive_color: "#22f022",
          children: [
            Node {
              translation: 0 0 .2,  # Offset from end spoke.
              children: [ USE "SpokeGeom" ],
            },
            # Rotatable end angle spoke.
            DiscWidget "EndSpoke" {
              mode: "kRotationOnly",
              inactive_color: "#f02222",
              children: [
                Node {
                  translation: 0 0 -.4,  # Offset from start spoke.
                  children: [ USE "SpokeGeom" ],
                },
              ]
            },
          ],
        },

        # Arc showing current angle.
        Node "Arc" {
          # Use the BaseColor shader.
          pass_name: $LIGHTING_PASS,
          shader_names: ["BaseColor"],

          state_table: StateTable { line_width: 3 },
          rotation: 1 0 0 -90,  # Rotate into XZ-plane.

          # Disable intersections.
          disabled_flags: "kIntersectAll",

          blocks: [
            UniformBlock {
              pass_name: $LIGHTING_PASS,
              uniforms: [ Uniform "uBaseColor" { vec4f_val: "#ddaadd" } ],
            }
          ],
          shapes: [ PolyLine "Line" {} ]
        },
      ]
    },

    # Text for numeric feedback.
    Node "Text" {
      CONSTANTS: [SCALE: "scale: 1.5 1.5 1.5"],
      children: [
        TextNode "RadiusText"     { $SCALE, color: $TARGET_COLOR },
        TextNode "StartAngleText" { $SCALE, color: "#22f022" },
        TextNode "ArcAngleText"   { $SCALE, color: $TARGET_COLOR },
      ]
    }
  ]
},
