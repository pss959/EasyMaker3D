# -----------------------------------------------------------------------------
# Generates public documentation using Sphinx in the "PublicDoc/site"
# subdirectory of the build directory.
# -----------------------------------------------------------------------------

from os         import environ, makedirs, walk
from os.path    import dirname, join, relpath
from subprocess import Popen, PIPE, run

Import('app_dict', 'doc_build_dir', 'snapimage')

# -----------------------------------------------------------------------------
# Helper functions.
# -----------------------------------------------------------------------------

# Recursive function to find all files under a root directory.
def FindAllSources_(root_dir):
    sources = []
    for root, dirnames, filenames in walk(root_dir, topdown=True):
        # Skip directories beginning with '.'.
        [dirnames.remove(d) for d in list(dirnames) if d.startswith('.')]
        sources += [join(root, fn) for fn in filenames]
    return sources

# Returns a list of all current documentation versions (as strings), in order
# from oldest to newest.
def GetAllVersions_():
    # Runs git with the given arguments, returning the resulting lines that match
    # the given pattern as a list.
    def RunGit_(arg_string, pattern):
        lines = Popen(['git'] + arg_string.split(),
                      stdout=PIPE, text=True).stdout.read()
        return [s for line in lines.split() if pattern in (s := line.strip())]

    # Get names of all releases (from release branches) and version tags.
    rels = [rel.replace('Release-', '')
            for rel in RunGit_('branch', 'Release-')]
    tags = RunGit_('tag', 'v')

    # Use the last tag for each release branch.
    versions = []
    for rel in rels:
        versions.append([t.replace('v', '') for t in tags
                         if t.startswith('v' + rel + '.')][-1])

    # Add the current version if it is not included (because there is no tag
    # for it yet).
    current_version = app_dict['VERSION_STRING']
    if not current_version in versions:
        versions.append(current_version)
    return versions

# Writes the JavaScript file defining all current documentation versions.
def CreateVersionJSFile_(file_path, versions):
    abs_file_path = File(file_path).abspath
    makedirs(dirname(abs_file_path), exist_ok=True)
    with open(abs_file_path, 'w') as f:
        f.write('var all_versions = [\n')
        for version in versions:
            alias = 'latest' if version == versions[-1] else ''
            f.write('    {\n')
            f.write(f'        "version": "{version}",\n')
            f.write(f'        "alias":   "{alias}",\n')
            f.write('    },\n')
        f.write(']\n')

# -----------------------------------------------------------------------------
# Environment.
# -----------------------------------------------------------------------------

env = Environment(
    OUTPUT_DIR     = f'#{doc_build_dir}/PublicDoc',
    VERSION_SUBDIR = app_dict['VERSION_STRING'],
    VERSION_DIR    = '$OUTPUT_DIR/$VERSION_SUBDIR',

    # Copy the environment variables for the snapimage application.
    ENV = environ.copy(),
)

# Pass values through to Sphinx via environment variables.
env.Append(
    ENV = {
        'PROJECT'   : app_dict['APP_NAME'],
        'VERSION'   : app_dict['VERSION_STRING'],
        'SUFFIX'    : app_dict['SESSION_SUFFIX'],
        'COPYRIGHT' : app_dict['COPYRIGHT'],
        'BASE_URL'  : app_dict['PUBLIC_DOC_BASE_URL'],
    },
)

root_dir = env.Dir('#').abspath   # Work around SCons issue.

# -----------------------------------------------------------------------------
# Builders.
# -----------------------------------------------------------------------------

# Builder function that creates an HTML URL redirect file. source is the
# absolute path to the file to redirect to; target is the absolute path to the
# file to redirect from.
def AddRedirect_(target, source, env):
    abs_from_path = str(target[0])
    abs_to_path   = str(source[0])
    rel_to_path   = relpath(abs_to_path, start=dirname(abs_from_path))
    makedirs(dirname(abs_from_path), exist_ok=True)
    with open(abs_from_path, 'w') as f:
        f.write(f"""<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Refresh" content="0; url='{rel_to_path}'" />
  </head>
  <body>
  </body>
</html>
""")
    return None  # Success!

env.Append(BUILDERS={ 'AddRedirect' : Builder(action=AddRedirect_) })

# -----------------------------------------------------------------------------
# Global variables.
# -----------------------------------------------------------------------------

output_doc_path  = env.Dir('$VERSION_DIR').abspath

# -----------------------------------------------------------------------------
# Cheat Sheet generation. This goes in the 'PublicDoc/docs' directory so it can
# be processed like all the other input.
# -----------------------------------------------------------------------------

cs_output    = 'docs/CheatSheet.rst'
cs_generator = '#build/opt/Apps/createcheatsheet'
env.Command(cs_output, cs_generator, '$SOURCE > $TARGET')

# -----------------------------------------------------------------------------
# Snapshot Image generation and annotation.
# -----------------------------------------------------------------------------

images = SConscript('SConscript_snaps', exports=['snapimage'])

# -----------------------------------------------------------------------------
# Version processing.
# -----------------------------------------------------------------------------

versions = GetAllVersions_()

# Create the versions.js file. This defines all versions that are shown in the
# version selector. The custom.js file contains a function that populates the
# version selector dropdown with all of these versions.
version_js_file = env.subst('$VERSION_DIR/_static/js/versions.js')
CreateVersionJSFile_(version_js_file, versions)

# -----------------------------------------------------------------------------
# Documentation generation.
# -----------------------------------------------------------------------------

sphinx      = 'sphinx-build'
sphinx_args = ' '.join([
    '-W',    # Treat warnings as errors,
    '-E',    # Rebuild if anything changes (no environment cache).
    '-a',    # Write all files.
])

# Run Sphinx to build the doc.
sources = FindAllSources_('docs')
doc = env.Command(f'$VERSION_DIR/index.html',
                  sources + [cs_output] + images,
                  ['echo === Building public doc for version: $VERSION_SUBDIR',
                   f'{sphinx} {sphinx_args} docs {output_doc_path}'],
                  chdir=f'{root_dir}/PublicDoc')

# Copy the top-level index.html file into the build directory.
index = env.Install(target='$OUTPUT_DIR', source='./index.html')

# Add URL redirect files to "latest" directory. These commands require the rest
# of the doc to be built first.
redirect_files = [
    'index.html',
    'CheatSheet.html',
    'Quickstart.html',
    'ReleaseNotes.html',
    'UserGuide/index.html',
    'VRSetup.html',
]
redirects = []
for rfile in redirect_files:
    from_path = join('latest',      rfile)
    to_path   = join(env.subst('$VERSION_SUBDIR'), rfile)
    abs_from_path = join(env.Dir('$OUTPUT_DIR').abspath, from_path)
    abs_to_path   = join(env.Dir('$OUTPUT_DIR').abspath, to_path)
    redirects.append(env.AddRedirect(target=abs_from_path, source=abs_to_path))

public_doc = [redirects, index]

Return('public_doc')
