# -----------------------------------------------------------------------------
# Generates videos for public documentation using the capturevideo application.
# -----------------------------------------------------------------------------

from os      import environ
from os.path import join

Import('capturevideo')

# -----------------------------------------------------------------------------
# Environment.
# -----------------------------------------------------------------------------

env = Environment(
    # Copy the environment variables for the capturevideo application.
    ENV = environ.copy(),
)

root_dir   = env.Dir('#').abspath   # Work around SCons issue.
video_dir  = './docs/extra/videos'
script_dir = './scripts/videos'
merge_pgm  = env.File('#/bin/mergevideo.py').abspath

# Helper functions.
def PlaceVideoFile_(name):
    return join(video_dir, name)
def PlaceVideo_(name):
    return PlaceVideoFile_(name + '.mp4')
def PlaceWebVtt_(name):
    return PlaceVideoFile_(name + '.vtt')

# -----------------------------------------------------------------------------
# Video generation and annotation.
# -----------------------------------------------------------------------------

# Dictionary of merged videos in merge order. Each entry is the merged name
# (and also the subdirectory name) mapped to the individual component videos in
# that subdirectory.
merges = {
    'AppPanels' : [
        'Intro',
        'Session',
        'Settings',
        'Info',
        'Help',
    ],
    'Combination' : [
        'Intro',
        'Hull',
        'CSG',
        'Union',
        'Intersection',
        'Difference',
        'CSGTool',
    ],
    'Conversion' : [
        'Intro',
        'Bend',
        'Bevel',
        'Clip',
        'Mirror',
        'Taper',
        'Twist',
    ],
    'Doorstop' : [
        'Starting',
        'Torus',
        'Cylinder',
        'Combining',
        'Name',
        'Export',
    ],
    'EdgeTarget' : [
        'Intro',
        'ModelPlacement',
        'BoundsPlacement',
        'Tools',
    ],
    'Editing' : [
        'Icons',
        'Delete',
        'CopyCut',
        'Paste',
        'PasteInto',
    ],
    'GeneralTools' : [
        'Intro',
        'TranslationTool',
        'ScaleTool',
        'RotationTool',
        'ComplexityTool',
        'ColorTool',
        'NameTool',
    ],
    'Layout' : [
        'Linear',
        'Radial',
    ],
    'Panels' : [
        'Intro',
        'Moving',
        'Resizing',
        'Interaction',
    ],
    'Precision' : [
        'Level',
        'Changing',
        'Shortcuts',
    ],
    'Primitives' : [
        'Icons',
        'Cylinder',
        'Torus',
        'RevSurf',
        'Extruded',
        'Text',
        'Imported',
    ],
    'Profile' : [
        'Tools',
        'Adding',
        'Deleting',
        'Snapping',
    ],
    'Selection' : [
        'NewModels',
        'SwitchingTools',
        'Multiple',
    ],
    'Sessions' : [
        'Commands',
        'Files',
        'State',
    ],
    'PointTarget' : [
        'Intro',
        'StagePlacement',
        'ModelPlacement',
        'BoundsPlacement',
        'NewModels',
        'Tools',
    ],
    'RadialMenus' : [
        'Intro',
        'Setting',
        'Using',
    ],
    'Rook' : [
        'RevSurf',
        'Target',
        'Cylinder',
        'Hollow',
        'Cutters',
        'Cutting',
    ],
    'TreePanel' : [
        'Intro',
        'Session',
        'Models',
        'Colors',
        'Selection',
        'Order',
    ],
    'Viewing' : [
        'View',
        'Edges',
        'BuildVolume',
        'Inspector',
    ],
    'WorkArea' : [
        'Stage',
        'Tooltips',
        'Viewing',
        'Shelves',
        'TreePanel',
        'Other',
    ],
}

# Create a video for each part of merged scripts.
part_scripts = [join(merged, part) for merged, parts in merges.items()
                for part in parts]

# Generate video RGB-MP4 and WebVTT files for each part.
for script in part_scripts:
    script_file  = script + '.econf'
    video_format = 'rgbmp4'
    cap_args = f'--format={video_format} --maximize --offscreen'
    video = env.Command([PlaceVideo_(script), PlaceWebVtt_(script)],
                        [capturevideo, join(script_dir, script_file)],
                        [f'@echo === Creating part video {script}',
                         Mkdir(video_dir),
                         f'@{capturevideo.abspath} {cap_args} {script_file}'],
                        chdir=root_dir)

# Generate merged/converted video MP4 and WebVTT files.
videos = []
for merged, parts in merges.items():
    # The part and merged videos are in the subdirectory named by "merged".
    merged_name = join(merged, merged)
    part_names  = [join(merged, part) for part in parts]
    video = env.Command([PlaceVideo_(merged_name), PlaceWebVtt_(merged_name)],
                        [PlaceVideo_(pn)  for pn in part_names] +
                        [PlaceWebVtt_(pn) for pn in part_names],
                        [f'@echo === Creating merged video {merged_name}',
                         f'@{merge_pgm} {merged_name} {" ".join(part_names)}'])
    videos.append(video)

env.Alias('Videos', videos)

Return('videos')
