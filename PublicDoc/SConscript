# -----------------------------------------------------------------------------
# scons configuration for public documentation using Sphinx.
#
# Generates public documentation using Jekyll in the "PublicDoc/site"
# subdirectory of the build directory.
# -----------------------------------------------------------------------------

from os      import environ, walk
from os.path import basename, join

Import('snapimage', 'doc_build_dir',
       'APP_NAME', 'SESSION_SUFFIX', 'VERSION_STRING')

# Recursive function to find all files under a root directory.
def FindAllSources(root_dir):
    sources = []
    for root, dirnames, filenames in walk(root_dir, topdown=True):
        # Skip directories beginning with '.'.
        [dirnames.remove(d) for d in list(dirnames) if d.startswith('.')]
        sources += [join(root, fn) for fn in filenames]
    return sources

# -----------------------------------------------------------------------------
# Environment.
# -----------------------------------------------------------------------------

env = Environment(
    OUTPUT_DIR = f'#{doc_build_dir}/PublicDoc',

    # Copy the environment variables for the snapimage application.
    ENV = environ.copy(),
)

# Pass values through to sphinx-build via environment variables.
env.Append(
    ENV = {
        'PROJECT' : APP_NAME,
        'VERSION' : VERSION_STRING,
        'SUFFIX'  : SESSION_SUFFIX,
    },
)

# -----------------------------------------------------------------------------
# Cheat Sheet generation.
# -----------------------------------------------------------------------------

cs_output    = './docs/CheatSheet.rst'
cs_generator = '#build/opt/Apps/createcheatsheet'
env.Command(cs_output, cs_generator, '$SOURCE > $TARGET')

# -----------------------------------------------------------------------------
# Snapshot Image generation.
# -----------------------------------------------------------------------------

script_dir = './snaps/scripts'
image_dir  = './docs/images'

def ImageFile(name):
  return join(image_dir, name + '.jpg')

image_names = [
    'Doorstop',
    'Logo',
    'WorkArea',
]

scripts      = Glob(f'{script_dir}/*', strings=True)
script_files = [basename(script) for script in scripts]
image_files  = [ImageFile(name) for name in image_names]

snaps = env.Command(image_files, [snapimage] + scripts,
                    [f'{snapimage.abspath} {sf}' for sf in script_files])

env.Alias('Snaps', snaps)

# -----------------------------------------------------------------------------
# Image annotations.
# -----------------------------------------------------------------------------

ann_script_dir = './snaps/annotations'
annotator      = env.File('#/bin/annotate.py').abspath

# Returns a triple: (script_file, input_image_file, output_image_file) based on
# the script file.
def GetAnnotationData(script_file):
  name = basename(script_file)
  return (script_file, ImageFile(name), ImageFile(name + 'Annotated'))

ann_scripts       = Glob(f'{ann_script_dir}/*', strings=True)
ann_data          = [GetAnnotationData(sf) for sf in ann_scripts]
ann_input_images  = [data[1] for data in ann_data]
ann_output_images = [data[2] for data in ann_data]

annotations = env.Command(ann_output_images,
                          [annotator] + ann_scripts + ann_input_images,
                          [f'{annotator} {data[1]} {data[0]} {data[2]}'
                           for data in ann_data],
                          chdir='PublicDoc')

# -----------------------------------------------------------------------------
# Documentation generation.
# -----------------------------------------------------------------------------

sources = FindAllSources('docs')
output_dir = env.Dir('$OUTPUT_DIR').abspath

sphinx_args = ' '.join([
    '-W',    # Treat warnings as errors,
    '-E',    # Rebuild if anything changes (no environment cache).
    '-a',    # Write all files.
])

doc = env.Command('$OUTPUT_DIR/index.html',
                  sources + [cs_output] + snaps + annotations,
                  ['echo = Building public doc for version: $VERSION_STRING',
                   f'sphinx-build {sphinx_args} docs {output_dir}'],
                  chdir='PublicDoc')
Return('doc')
