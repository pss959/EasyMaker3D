from re         import match
from shutil     import copy2, copytree, rmtree
from subprocess import Popen, PIPE, run
from os         import makedirs, walk
from os.path    import basename, dirname, isfile, join, relpath
from zipfile    import ZipFile

Import('rel_dict')

# -----------------------------------------------------------------------------
# Linux/Windows helper functions. Builds a Zip file containing the app and all
# other necessary files.
# -----------------------------------------------------------------------------

# Creates the release Zip file. NOTE: The 'Zip()' builder in SCons claims to
# allow the command to be modified with the 'ZIP', 'ZIPFLAGS', and other
# construction variables. However, they are actually not used in the
# SCons.Tool.zip source file. So do everything manually here.
def BuildZipFile_(target, source, env):
    exclusions = env['RESOURCE_EXCLUSIONS']
    zf = ZipFile(str(target[0]), 'w')
    def AddFile_(f, rel_path):
        if not f in exclusions:
            zf.write(f, f'{rel_dict["app_name"]}/{rel_path}')
    for src in source:
        name = str(src)
        # Walk through directories.
        if src.isdir():
            basedir = dirname(name)
            for root, dirs, files in walk(name):
                if not root in exclusions:
                    for f in files:
                        path = join(root, f)
                        if isfile(path):
                            AddFile_(path, relpath(path, basedir))
        else:  # Regular file - add at the top level.
            AddFile_(name, basename(name))

def BuildReleaseZipFile_(env):
    zip_input  = [rel_dict['app'], rel_dict['app_lib'], rel_dict['ion_lib'],
                  rel_dict['ovr_lib'], rel_dict['res_dir']]
    zip_output = f'$BUILD_DIR/Release/{rel_dict["rel_name"]}.zip'
    if env['PLATFORM'] == 'windows':
        # Windows requires all dependent libraries to be present.
        zip_win_mingw_libs = [
            'glfw3',
            'libbrotlicommon',
            'libbrotlidec',
            'libbz2-1',
            'libfreetype-6',
            'libgcc_s_seh-1',
            'libglib-2.0-0',
            'libgmp-10',
            'libgraphite2',
            'libharfbuzz-0',
            'libiconv-2',
            'libintl-8',
            'libmpfr-6',
            'libpcre2-8-0',
            'libpng16-16',
            'libstdc++-6',
            'libwinpthread-1',
            'zlib1',
        ]
        mingw_dir = env.ConvertPath('/mingw64/bin')
        zip_input += [f'{mingw_dir}/{lib}.dll' for lib in zip_win_mingw_libs]
    return env.Command(zip_output, zip_input, BuildZipFile_)

# -----------------------------------------------------------------------------
# Mac-specific helper functions. Builds a DMG from a bundle.
#
# Bundle hierarchy, created under $BUILD_DIR :
#  {app_name}.app/Contents/
#        Frameworks/
#           <all dylibs>
#        Info.plist [generated here]
#        MacOS/
#           <app>
#        Resources/
#           resources/...
#
# 'install_name_tool' is used to fix paths in the app and dylibs, as follows:
#    app refers to each dylib as:
#           '@loader_path/../Frameworks/<full-dylib-name.dylib>'
#    each dylib has ID:
#           '@executable_path/../Frameworks/<full-dylib-name.dylib>'
#       and refers to other dylibs as:
#           '@loader_path/../Frameworks/<full-dylib-name.dylib>'
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# This class does most of the work for building a Mac release.
# -----------------------------------------------------------------------------

class MacHelper(object):
    def BuildDMG(self, env, target, app):
        app_file = env.File(app).abspath
        app_name = basename(app_file)

        # Step 1: Collect libraries to fill dictionaries:
        lib_mgr = self._LibManager(env)
        lib_mgr.AddLibsForTarget(app_file)

        # Step 2: Copy everything into a bundle directory.
        bundle_path = env.Dir(f'$BUILD_DIR/{app_name}.app').abspath
        bundler = self._Bundler(env, bundle_path)
        bundler.Bundle(app_file, lib_mgr.GetFileDict(), 'resources')

        # Step 3: Fix all of the library paths in the bundled app and libs.
        self._FixLibs(bundler.GetApp(), bundler.GetLibs(),
                      lib_mgr.GetReplacementDict())

        # Step 4: Create a DMG from the bundle directory.
        dmg_file = File(target[0]).abspath
        dmg_cmd = (f'hdiutil create {dmg_file} -ov -volname {app_name}' +
                   f' -fs HFS+ -srcfolder {bundle_path}')
        run(Split(dmg_cmd))

    # -------------------------------------------------------------------------

    # Private class to manage libraries. Some terminology:
    #
    #   "lib_path" is the path to a library accessed from running otool.
    #   "lib_name" is the name of the library file (e.g., "libfoo.dylib").
    #   "file_path" is an absolute path to some instance of the library file.
    #
    # Dictionaries:
    #   self._repl_dict maps lib_path => lib_name
    #   self._file_dict maps lib_name => file_path
    class _LibManager(object):
        def __init__(self, env):
            self._env = env
            #  Initialize the dicts with the openvr_api library, which is a
            #  special case because its ID uses '@rpath'.
            ovr_name = 'libopenvr_api.dylib'
            ovr_path = env.File('$OPENVR_LIB').abspath
            self._repl_dict = { f'@rpath/{ovr_name}' : ovr_name }
            self._file_dict = { ovr_name             : ovr_path }

        # Adds any new libraries found by running otool on the given target,
        # which may be an application or dylib.
        def AddLibsForTarget(self, target):
            for lib_path in self._GetLibPaths(target):
                if not lib_path in self._repl_dict:  # Not already handled
                    lib_name  = basename(lib_path)
                    file_path = File(lib_path).abspath
                    self._repl_dict[lib_path] = lib_name
                    self._file_dict[lib_name] = file_path

                    # Recurse.
                    self.AddLibsForTarget(file_path)

        # Returns the resulting dictionary of library replacements.
        def GetReplacementDict(self):
            return self._repl_dict

        # Returns the resulting dictionary of library files.
        def GetFileDict(self):
            return self._file_dict

        def _GetLibPaths(self, target):
            # Get dependent library lines.
            lines = Popen(['otool', '-L', target],
                          stdout=PIPE, text=True).stdout.read().splitlines()
            # Skip the first line, which is the name of the target.
            return [lib_path for line in lines[1:]
                    if (lib_path := self._GetLibLine(line.strip()))]

        def _GetLibLine(self, line):
            if (line.startswith('@') or line.startswith('/System') or
                line.startswith('/usr/lib')):
                return ''
            # See if there is a parsable library.
            result = match(r'.*/([^/]+\.dylib)', line)
            return result.group() if result else ''

    # -------------------------------------------------------------------------

    # Private class used to create a bundle.
    class _Bundler(object):
        def __init__(self, env, path):
            self._env = env
            self._path = f'{path}/Contents'
            # Remove any previous bundle and create subdirectories.
            rmtree(self._path, ignore_errors=True)
            makedirs(f'{self._path}/MacOS/')
            makedirs(f'{self._path}/Frameworks/')
            makedirs(f'{self._path}/Resources/')

        def Bundle(self, app_file, lib_dict, resource_dir):
            # Copy the app.
            self._app_path = f'{self._path}/MacOS/{basename(app_file)}'
            copy2(app_file, self._app_path)

            # Copy the libraries.
            self._lib_paths = []
            for lib_name, lib_path in lib_dict.items():
                lib = f'{self._path}/Frameworks/{lib_name}'
                copy2(lib_path, lib)
                self._lib_paths.append(lib)

            # Copy the resources directory.
            exclusions = self._env['RESOURCE_EXCLUSIONS']
            def Exclude_(dir, files):
                return ([dir] if dir in exclusions else
                        [f for f in files if f'{dir}/{f}' in exclusions])
            copytree(resource_dir, f'{self._path}/Resources/{resource_dir}',
                     ignore=Exclude_)

        def GetApp(self):
            return self._app_path

        def GetLibs(self):
            return self._lib_paths

    # -------------------------------------------------------------------------

    def _FixLibs(self, app, libs, replacement_dict):
        # Construct most of a command to replace library paths with
        # bundle-relative ones.
        replace_cmd = 'install_name_tool '
        for old_path, name in replacement_dict.items():
            new_path     = f'@loader_path/../Frameworks/{name}'
            replace_cmd += f'-change {old_path} {new_path} '

        # Fix the app.
        run(Split(f'{replace_cmd} {app}'))

        # Fix the libraries.
        for lib in libs:
            lib_name = basename(lib)
            lib_id = f'@executable_path/../Frameworks/{lib_name}'
            run(Split(f'{replace_cmd} -id {lib_id} {lib}'))

# -----------------------------------------------------------------------------

# This is used to build a DMG on the Mac. This uses a Builder because it has
# to execute after the application and its dependency libraries are built.
def BuildMacDMG_(env):
    # SCons Builder that creates the DMG for the release. The source is a list
    # whose first element is the app. The target is the DMG file path.
    def MacDMGBuilder_(target, source, env):
        MacHelper().BuildDMG(env, target, source[0])
        return None  # Success!

    env.Append(BUILDERS={ 'BuildMacDMG' : Builder(action=MacDMGBuilder_) })

    app_name = rel_dict['app_name']
    dmg_file = f'$BUILD_DIR/Release/{app_name}.dmg'
    sources  = [rel_dict['app'], rel_dict['app_lib'], rel_dict['ion_lib']]
    env.BuildMacDMG(target=dmg_file, source=sources)
    return dmg_file

# -----------------------------------------------------------------------------
# Building the release. The release is a Zip file on Linux and Windows and a
# DMG on Mac.
# -----------------------------------------------------------------------------

app_env = rel_dict['app_env']

rel = (BuildMacDMG_(app_env) if app_env['PLATFORM'] == 'mac'
       else BuildReleaseZipFile_(app_env))

Return('rel')
