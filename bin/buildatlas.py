#!/usr/bin/env python3

from glob    import glob
from os      import popen, remove, replace, system
from os.path import basename, splitext
from sys     import argv

# This defines how many images are in each row of the atlas.
kRowCount = 8

# -----------------------------------------------------------------------------
# Guarantees that all PNG images in the list are the correct size (128x128) and
# format.
# -----------------------------------------------------------------------------

def FixImageFiles(image_files):
  for im in image_files:
    tmpfile = 'tmp.png'
    system(f'convert -define colorspace:auto-grayscale=off'
           f' -resize 128x128! {im} PNG32:{tmpfile}')
    # Check for differences before overwriting.
    sha1 = popen(f'identify -quiet -format "%#" {im}').read()
    sha2 = popen(f'identify -quiet -format "%#" {tmpfile}').read()
    if sha1 == sha2:
      remove(tmpfile)
    else:
      replace(tmpfile, im)

# -----------------------------------------------------------------------------
# Creates the texture atlas PNG file.
# -----------------------------------------------------------------------------

def CreateTextureAtlas(image_files, atlas_path):
  # Use ImageMagick to create the atlas.
  file_list = ' '.join(image_files)
  cmd = (f'montage -mode concatenate -background None -tile {kRowCount}x'
         f' {file_list} images/{atlas_path}')
  system(cmd)

# -----------------------------------------------------------------------------
# Returns a triple containing (texture_name, scale, offset) for each image.
# The scale and offset are both (x,y) pairs.
# -----------------------------------------------------------------------------

def GetTextureTriples(image_files):
  # X scale is constant. There is always space for kRowCount images across.
  scale_x = 1. / kRowCount

  # Y scale depends on how many rows there are.
  scale_y = round(1. / (len(image_files) / kRowCount), 6)

  row = 0
  col = 0

  triples = []
  for im in image_files:
    # The uniform name is the name of the file (without the extension).
    name = splitext(basename(im))[0]

    offset_x = col * scale_x
    offset_y = row * scale_y

    triples.append((name, (scale_x, scale_y), (offset_x, offset_y)))

    col = col + 1
    if col == kRowCount:
      col = 0
      row = row + 1

  return triples

# -----------------------------------------------------------------------------
# Creates the TextureAtlas node file.
# -----------------------------------------------------------------------------

def CreateNodeFile(image_files, atlas_path, node_path, node_name):
  # Get triples for all textures: (name, scale, offset)
  triples = GetTextureTriples(image_files)

  with open(node_path, 'w') as f:
    f.write(f'# This file was generated by {basename(argv[0])}.\n')
    f.write(f'TextureAtlas "{node_name}" {{\n')
    f.write(f'  uniform_name: "uTexture",\n')
    f.write(f'  sampler: Sampler "DefaultSampler" {{}},\n')
    f.write(f'  image: FileImage {{ path: "{atlas_path}" }},\n')
    f.write(f'  uniforms: [\n')
    for triple in triples:
      name = triple[0]
      sx   = triple[1][0]
      sy   = triple[1][1]
      ox   = triple[2][0]
      oy   = triple[2][1]
      f.write(f'    Uniform "{name}" {{ vec4f_val: {sx} {sy} {ox} {oy} }},\n')
    f.write(f'  ]\n')
    f.write(f'}}\n')

# -----------------------------------------------------------------------------
# Mainline.
# -----------------------------------------------------------------------------

usage = f"""
*** Usage: {argv[0]} <image_dir> <atlas_path> <node_path> <node_name>
    Creates a texture atlas from a set of images.
    <image_dir>:
        Directory containing the images. All .png files in this directory are
        added to the atlas.
    <atlas_path>:
        The path of the output file to contain the texture atlas relative to
        the images subdirectory.
    <node_path>
       The path of the output file to contain the MVN TextureAtlas node
       relative to the current directory.
    <node_name>
       The name to give to the TextureAtlas node.
"""

def main():
  if len(argv) != 5:
    print(usage)
    return 1

  image_dir  = argv[1]
  atlas_path = argv[2]
  node_path  = argv[3]
  node_name  = argv[4]

  # Make sure there are images.
  image_files = sorted(glob(f'{image_dir}/*.png'))
  if not image_files:
    print(f'*** No PNG images found in {image_dir}')
    return 2

  FixImageFiles(image_files)
  CreateTextureAtlas(image_files, atlas_path)
  CreateNodeFile(image_files, atlas_path, node_path, node_name)

if __name__ == '__main__':
  main()
