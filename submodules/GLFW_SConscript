# -----------------------------------------------------------------------------
# Builds the GLFW library.
# -----------------------------------------------------------------------------

Import('*')

# Start with a fresh environment.
env = Environment(
    CPPDEFINES = [
        '_GLFW_USE_CONFIG_H',
    ],
    BUILD_DIR = f'glfw/{build_dir}',  # Directory for build products.
    CMAKE_DIR = 'glfw/cmake_tmp',     # Directory for running cmake.
    CPPPATH = "$CMAKE_DIR/src",       # Pick up generated header files.
)

env.VariantDir("$BUILD_DIR", 'glfw/src', duplicate = 0)

sources = [f'$BUILD_DIR/{source}' for source in [
    'context.c',
    'egl_context.c',
    'glx_context.c',
    'init.c',
    'input.c',
    'linux_joystick.c',
    'monitor.c',
    'osmesa_context.c',
    'posix_thread.c',
    'posix_time.c',
    'vulkan.c',
    'window.c',
    'x11_init.c',
    'x11_monitor.c',
    'x11_window.c',
    'xkb_unicode.c',
]]

objects = [env.StaticObject(source) for source in sources]
env.Depends(objects, f'glfw/src/glfw_config.h')

# Create a temporary directory to run cmake in.
env.Command("$CMAKE_DIR", [], Mkdir("$CMAKE_DIR"), chdir='submodules')
if not env.GetOption('clean'):
    env.AlwaysBuild("$CMAKE_DIR")

# Run cmake to generate header files.
config_file = 'glfw/src/glfw_config.h'
env.Command(config_file, ['glfw/src/glfw_config.h.in', "$CMAKE_DIR"],
            "cmake ..", chdir="submodules/$CMAKE_DIR")

lib = env.Library(f'glfw/{build_dir}/libglfw3', objects)

env.Clean(lib, ["$BUILD_DIR", "$CMAKE_DIR"])
