          'defines': [
            'ION_PLATFORM_WINDOWS=1',
          ],
          'msvs_disabled_warnings': [
            # Generated by Windows header dbghelp.h in VS2015.
            '4091',
            # No matching operator delete found; memory will not be freed if
            # initialization throws an exception.
            # Placement new operators in Ion headers are not exception-safe
            # and we have to enable exceptions in Windows builds (because the
            # VS2013 headers are incompatible with disabling exceptions), so
            # any dependent project has to suppress this level 1 warning which
            # is pretty bad but necessary.
            '4291',
            # VS2015 performance warning about converting int to bool.
            '4800',
          ],
        },  # all_dependent_settings

        'msvs_disabled_warnings': [
          # '*/' found outside of comment
          # Some google code does this, in violation of the style guide.

          '4138',

          # Type1 needs to have dll-interface to be used by clients of class
          #     Type2
          # Exported class derived from a class that was not exported.
          # Deriving a class from an STL class causes these.  If the STL class
          # isn't completely inlined in the instantiation of the derived class,
          # this can lead unresolved symbols at link time.
          '4251',
          '4275',

          # New behavior: elements of array will be default initialized.
          # That's exactly what we want to happen.  This warning exists because
          # old versions of MSVC++ didn't do this and thus it might otherwise
          # appear to be a performance regression.
          '4351',
        ],
        'msvs_settings': {
          # The object files are stored in a directory structure that mirrors the
          # corresponding source tree. This prevents clobbering when two files in
          # different directories have the same name.
          'VCCLCompilerTool': {
            'ObjectFile': '$(IntDir)%(Directory)',
          },
          # Visual Studio 2015 Update 2 has an undocumented feature where it
          # automatically inserts telemetry calls that sound suspicious.
          # This linker option removes them (verified via disassembly).
          # For more details, see:
          # https://www.infoq.com/news/2016/06/visual-cpp-telemetry#anch137071
          'VCLinkerTool': {
            'AdditionalOptions': [
              'notelemetry.obj',
            ],
          },
        },
      },

--------------------------------------------------------------------------

    ['OS=="win"', {
      'includes': [
        'windows.gypi',
      ],
      'variables': {
        'library': 'static_library',
        'ogles20%': '0',
      },
      'target_defaults': {
        'configurations': {
          'x86_base': {
            'abstract': 1,
            'msvs_settings': {
              'VCLinkerTool': {
                'TargetMachine' : 1 # /MACHINE:X64
              },
            },
            'include_dirs': [
              '<@(include_dirs_common)',
            ],
            'library_dirs': [
              '<@(library_dirs_x86)',
            ],
            'defines' : [
              'ION_ARCH_X86=1'
            ],
          },
          'x64_base': {
            'abstract': 1,
            'msvs_configuration_platform': 'x64',
            'msvs_target_platform': 'x64',
            'msvs_settings': {
              'VCLinkerTool': {
                'TargetMachine': '17', # x86 - 64
              },
            },
            'include_dirs': [
              '<@(include_dirs_common)',
            ],
            'library_dirs': [
              '<@(library_dirs_x64)',
            ],
            'defines' : [
              'ION_ARCH_X86_64=1'
            ],
          },
        },  # configurations

        'conditions': [
          ['GENERATOR == "msvs"', {
            'default_configuration': 'Debug',
            'configurations': {
              # The visual studio standards are "Debug" and "Release" so use
              # those here. Also, we're only targeting x64 out of the box. It's
              # possible to add additional platforms in the Configuration
              # manager inside visual studio.
              'Debug': {
                'inherit_from': ['dbg_base', 'x64_base'],
              },
              'Release': {
                'inherit_from': ['dbg_base', 'x64_base'],
              },
            },
          }, {
            'default_configuration': 'dbg_x86',
            'configurations': {
              # A note on naming: the convention on windows is to append 'x86' or
              # 'x64' to the configuration name, so we follow that here.
              'dbg_x86': {
                'inherit_from': ['dbg_base', 'x86_base'],
              },
              'opt_x86': {
                'inherit_from': ['opt_base', 'x86_base'],
              },
              'prod_x86': {
                'inherit_from': ['prod_base', 'x86_base'],
              },
              'dbg_x64': {
                'inherit_from': ['dbg_base', 'x64_base'],
              },
              'opt_x64': {
                'inherit_from': ['opt_base', 'x64_base'],
              },
              'prod_x64': {
                'inherit_from': ['prod_base', 'x64_base'],
              },
              # Windows needs an additional "Default" configuration because
              # that's configuration used in protoc_build.gyp. The name
              # "Default" is special because that's what gyp uses as the
              # default configuration name if no other configurations are
              # specified.  On windows, though, the configuration names have to
              # be enumerated because of environment.x86/x64 file generation.
              # See generate_ninja_environment.gyp for how the environment files
              # are created.
              'Default': {
                'inherit_from': ['opt_base', 'x86_base'],
              },
            },
          }],
        ],  # conditions

        # Do NOT run any scripts as a cygwin script (which does all sorts of
        # cygpath conversion that we don't need).
        'msvs_cygwin_shell': 0,
        'msvs_quote_cmd': 0,

        'msvs_settings': {
          'VCCLCompilerTool': {
            'WarnAsError': 'true',  #  /WX
            'DefaultCharIsUnsigned': 'true',  # /J
            'EnableFunctionLevelLinking': 'true',  # /Gy
            'StringPooling': 'true',  # /GF
            'SuppressStartupBanner': 'true',  # /nologo

            'WarningLevel': '3',  # /W3
            'AdditionalOptions': ['/bigobj', '/Zm500'],
            'ExceptionHandling': '1',
          },
          'VCResourceCompilerTool': {
            'AdditionalIncludeDirectories': ['<@(include_dirs_common)'],
          },
        },
        'msvs_configuration_attributes': {
          'OutputDirectory': '<(out_dir)',
          # Make the intermediate directory include the target name. This is
          # because visual studio tries to build multiple targets at once, but
          # steps on its own feet when outputting to the same 'obj' directory.
          'IntermediateDirectory': '<(out_dir)\\obj\\>(_target_name)',
        },
      },
    }],  # win

    ['OS == "win"', {
      'target_defaults': {
        'defines': [
          'ION_APIENTRY=APIENTRY',
        ],  # defines
      },
    }, {
      # Doing it this way is easier than sprinkling this define in each of the
      # other platform sections (above).
      'target_defaults': {
        'defines': [
          'ION_APIENTRY=',
        ],
      },
    }],
